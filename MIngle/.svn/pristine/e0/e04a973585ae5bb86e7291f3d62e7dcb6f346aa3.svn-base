package reusableMethods;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;

import org.openqa.selenium.By;
import org.sikuli.script.FindFailed;
import org.sikuli.script.Pattern;
import org.sikuli.script.Screen;

import actions.Actions;
import objRepository.Global;
import objRepository.IONDesk.OOOsettings;
import objRepository.IONDesk.WorkFlow;
import objRepository.Social.ActivityFeed;
import objRepository.Social.ShellHeader;
import objRepository.Streams.Streams;

public class RM_IONDESK 

{ 
	
	/*******************Navigate to ION DESK***********************/
	public final static String RpPath=System.getProperty("user.dir");
    public static void navigateionDesk()
    {
    	Actions.click(WorkFlow.appMenu, "Click On 'App Menu'");
    	Actions.click(WorkFlow.ionDeskIcon, "click on IONDESK");
    }
    
    /***************Navigate to worflow creation*******************/ 
    
    public static void navigate_WorkFlow()
    {
    	navigateionDesk();
    	Actions.switchtoFrame(WorkFlow.ionDeskCLFrame, "Switch to ION Desk Frame");
    	Actions.verifyElement(WorkFlow.statusOverview, "status over view");
    	Actions.moveTo(WorkFlow.iconMenu, "move to icon menu");
    	Actions.click(WorkFlow.iconMenu, "click to icon menu");
    	Actions.click(WorkFlow.model, "click on model");
    	Actions.click(WorkFlow.monitorsWorkflows, "click on Monitors & Workflows");
    	Actions.click(WorkFlow.WorkFlows, "click on Workflows");
    	
    }
    
    /********************Add new WorkFlow*************************/
    
    public static void add_NewWorkFlow(String wfname,String wfdesc)
    {
    	navigate_WorkFlow();
    	Actions.switchtoFrame(WorkFlow.workflowdeskCLFrame, "Switch to workflow frame");
    	Actions.pause(.5);
    	Actions.click(WorkFlow.add_NewWorkflow, "click on add new workflow");
    	Actions.pause(1);
    	Actions.type(WorkFlow.workFlowName,wfname,"enter Work flow name");
    	Actions.type(WorkFlow.workFlowDesc,wfdesc,"enter workflow description");
    	Actions.click(WorkFlow.collapse,"collapse");
    	Actions.pause(3);
    	Actions.verifyElementPresent(WorkFlow.expandIcon,"expand");
    	Actions.click(WorkFlow.expandIcon,"click expand");
    }
    
    
    /*******************Drag and Drop task in Workflow***************/
    
    public static void dragAndDrop()
    {
    Screen s=new Screen();
    Pattern task=new Pattern("C:\\sikuli.sikuli\\1483524262102.png");
    Pattern desti=new Pattern("C:\\sikuli.sikuli\\1483526252204.png");
    try {
    	s.dragDrop(task,desti);
    } catch (FindFailed e) {
    	//TODO Auto-generated catch block
    	e.printStackTrace();
    }
    }
    
    /*******************Drag and Drop 2 tasks,1 Notification in Workflow***************/
    
    public static void create_2tasks1Notif()
    {
    Screen s=new Screen();
   /* Pattern task=new Pattern(".\\sikuli\\1483524262102.png");
    Pattern desti=new Pattern(".\\sikuli\\1483526252204.png");
    Pattern notif = new Pattern(".\\sikuli\\1483521813308.png");*/
    Pattern task=new Pattern(".\\sikuli\\1483524262102.png");
    Pattern desti=new Pattern(".\\sikuli\\1483526252204.png");
    //Pattern desti2 = new Pattern("C:\\sikuli.sikuli\\1483524760955.png"); 
    Pattern notif = new Pattern(".\\sikuli\\1483521813308.png");
    try {
    	s.dragDrop(task,desti);
    	s.dragDrop(task,desti);
    	s.dragDrop(notif,desti);
    	
    } catch (FindFailed e) {
    	//TODO Auto-generated catch block
    	e.printStackTrace();
    }
    }
    
    
    
/*******************Drag and Drop 2 tasks in Workflow***************/
    
    public static void create_2tasks()
    {
    Screen s=new Screen();
    Pattern task=new Pattern("C:\\sikuli.sikuli\\1483524262102.png");
    Pattern desti=new Pattern("C:\\sikuli.sikuli\\1483526252204.png");
    try {
    	s.dragDrop(task,desti);
    	s.dragDrop(task,desti);
    	
    } catch (FindFailed e) {
    	//TODO Auto-generated catch block
    	e.printStackTrace();
    }
    }
    /*************************Verify data***************************/
    
    public static void verify_Data(String user)
    {
		Actions.verifyElement(By.xpath("//div[text()='"+user+"']"), user);
    }
    
    
    
    /*******************Activate Work flow************************/
    
    public static void activate_workFlow(String wfname)
    {

    	/*Actions.pause(5);
    	Actions.type(WorkFlow.workFlowName,"Test","enter Work flow name");
    	Actions.pause(5);
        Actions.type(WorkFlow.workFlowDesc,wfdesc,"enter workflow description");
    	Actions.moveTo(WorkFlow.collapse, "move to Collpasse");
    	Actions.pause(5);*/

    
    Actions.pause(3);
    Actions.click(WorkFlow.activate_WF, "Activate Work flow");
    Actions.switchToDefaultContent();
	Actions.switchtoFrame(WorkFlow.ionDeskCLFrame, "Switch to ION Desk Frame");
	Actions.pause(3);
	Actions.click(WorkFlow.WorkFlows, "click on Workflows");
	Actions.switchtoFrame(WorkFlow.workflowdeskCLFrame, "switch to work flow frame");
	verify_Data(wfname);
	verify_Data("Active");
    }
    
    
    /*********************De-Activate Work flow**********************/
    
    public static void deactivate_workFlow(String wfname)
    {
    By by=By.xpath("//div[text()='"+wfname+"']");
	Actions.moveTo(by, "move to created Work flow");
    Actions.click(WorkFlow.deactivate_WF, "deactivate Work flow");
    }
    
    /**************************Create 1 task Workflow***************************/
    
    public static void createworkFlow(String wfname,String wfdesc,String message,String user1,String user2,String user)
    {
    	Actions.click(WorkFlow.collapseIcon, "collapse");
    	Actions.pause(2);
    	Actions.click(WorkFlow.task1, "select task");
    	properties_WF(message,user1,user2);
    	save_WF();
    	Actions.pause(.5);
    	activate_workFlow(wfname);
    	workFlowAuth(wfname);
    	//delete_workFlowAuth(wfname);
    	//deactivate_workFlow(wfname);
    	//Actions.verifyElement(WorkFlow.delete_Btn, "delete icon");
    	//Actions.click(WorkFlow.delete_Btn,"delete workflow");
    	
    }

    
    
    
 /**************************Create 2 tasks and 1 Notification Work flow***************************/
    
    public static void create2tasks1Notif_WF(String multitaskwf,String multitaskdesc,String message,String message1,String message2,String user1,String user2)
    {
    	/*Actions.type(WorkFlow.workFlowName,multitaskwf,"enter Work flow name");
    	Actions.type(WorkFlow.workFlowDesc,multitaskdesc,"enter workflow description");*/
    	Actions.click(WorkFlow.collapseIcon, "collapse");
    	Actions.click(WorkFlow.task1, "select task");
    	properties_WF(message,user1,user2);
    	Actions.pause(.5);
    	Actions.click(WorkFlow.task2, "select Task 2");
    	properties_WF(message1,user1,user2);
    	Actions.pause(.5);
    	Actions.click(WorkFlow.notification1, "select Notification 1");
    	properties_WF(message2,user1,user2);
    	save_WF();
    	Actions.pause(.5);
    	activate_workFlow(multitaskwf);
    	workFlowAuth(multitaskdesc);
    	//delete_workFlowAuth(wfname);
    	//deactivate_workFlow(wfname);
    	//Actions.verifyElement(WorkFlow.delete_Btn, "delete icon");
    	//Actions.click(WorkFlow.delete_Btn,"delete workflow");
    	
    }
    
    
/**************************Create 2 tasks Work flow***************************/
    
    public static void create2tasks(String multitaskwf,String multitaskdesc,String message,String message1,String user1,String user2)
    {
    	/*Actions.type(WorkFlow.workFlowName,multitaskwf,"enter Work flow name");
    	Actions.type(WorkFlow.workFlowDesc,multitaskdesc,"enter workflow description");
    	Actions.click(WorkFlow.collapse, "collapse");*/
    	Actions.click(WorkFlow.collapseIcon, "collapse");
    	Actions.pause(2);
    	Actions.click(WorkFlow.task1, "select task");
    	properties_WF(message,user1,user2);
    	Actions.pause(.5);
    	Actions.click(WorkFlow.task2, "select Task 2");
    	properties_WF(message1,user1,user2);
    	Actions.pause(.5);
    	/*Actions.click(WorkFlow.notification1, "select Notification 1");
    	properties_WF(message2,user1,user2);*/
    	save_WF();
    	Actions.pause(.5);
    	activate_workFlow(multitaskwf);
    	workFlowAuth(multitaskdesc);
    	//delete_workFlowAuth(wfname);
    	//deactivate_workFlow(wfname);
    	//Actions.verifyElement(WorkFlow.delete_Btn, "delete icon");
    	//Actions.click(WorkFlow.delete_Btn,"delete workflow");
    	
    }
    
    /*****************Workflow Properties****************/
    
    public static void properties_WF(String message,String user1,String user2)
    {
    //Actions.click(WorkFlow.prop_task,"task properties");
	Actions.type(WorkFlow.Message, message,"enter task message");
	Actions.click(WorkFlow.prop_Distribution, "click Distribution");
	Add_Userprop(user1);
	Add_Userprop(user2);
    }
    
    /*****************Workflow Properties****************/
    
    public static void Add_Userprop(String user)
    {
    Actions.click(WorkFlow.add_WF,"click on add");
	Actions.pause(2);
	Actions.click(WorkFlow.dropDown,"click on drop down");
	Actions.click(WorkFlow.dropDown_User, "select Users");
	Actions.pause(2);
	Actions.type(WorkFlow.search,user,"enter user name");
	Actions.pause(2);
	Actions.click(WorkFlow.search_Btn, "click search button");
	Actions.pause(2);
	Actions.scrollToElement(WorkFlow.ok_Btn);
	Actions.pause(2);
	Actions.click(WorkFlow.ok_Btn, "ok Button");
	Actions.pause(2);
    }
    
    /*****************SAVE Workflow****************/
    
    public static void save_WF()
    {
    Actions.click(WorkFlow.save_Btn, "save Work flow");
    }
    
    /*****************select Workflow Authorizations****************/
    
    public static void workFlowAuth(String wfname)
    {
    	Actions.switchToDefaultContent();
    	Actions.pause(2);
    	Actions.switchtoFrame(WorkFlow.ionDeskCLFrame, "Switch to ION Desk Frame");
    	Actions.moveTo(WorkFlow.settings, "move to settings");
    	Actions.click(WorkFlow.settings, "click on settings");
    	Actions.click(WorkFlow.authorizations, "navigate to authorizations");
    	Actions.click(WorkFlow.workflowAuthorizations, "click on workflowAuthorizations ");
    	Actions.switchtoFrame(WorkFlow.workflowdeskCLFrame, "switch to work flow frame");
    	Actions.click(WorkFlow.mingleIONEnabled, "select roles");
    	Actions.click(WorkFlow.authWF_AddBtn, "add Workflow");
    	Actions.click(By.xpath("//div[text()='"+wfname+"']/../../descendant::span"), "select woorkflow");
    	Actions.click(WorkFlow.ok_Btn, "click OK button");
    	Actions.pause(2);
    	Actions.click(WorkFlow.save_Btn, "click save");
    }
    
    
    /******************delete Work flow authorization**************/
    
    public static void delete_workFlowAuth(String wfname)
    {
    	Actions.click(By.xpath("//div[text()='"+wfname+"']"), "select work flow");
    	Actions.click(WorkFlow.delete_Btn, "delete ");
    	Actions.click(WorkFlow.save_Btn, "click save");
    }
    
    

	/*********************Navigate to Streams-Workflows *******************/
    
    public static void navigate_StreamsWF(){
    	
    	Global.minglePageLoad_Social();
		Actions.click(Streams.streamsHeader, "Click On Streams Header");  
		Global.minglePageLoad_Social();
		Actions.verifyElement(Streams.streams, "waiting for 'Streams' heading");
		Actions.click(WorkFlow.streamsworkFlows, "click on Workflows");
		Global.minglePageLoad_Social();
	} 
    
    
    
    /*********************START WF from StreamsHeader*******************/
    public static void start_WorkFlow(String wfname) throws ParseException
    {
    RM_Social.navigateToActivityPage();
	navigate_StreamsWF();
	Actions.pause(2);
	Actions.click(WorkFlow.addWorkFlows, "click on add work flows");
	Actions.click(WorkFlow.select_WF, "click drop down to select Work flow");
	Actions.click(By.xpath("//li[@data-value='"+wfname+"']"), "select created WF");
	Actions.pause(2);
	Actions.click(WorkFlow.start_Btn, "click start button");
	Global.minglePageLoad_Social();
	verifyWFStatuses(wfname);
	Actions.verifyElement(WorkFlow.activityFeedHeader, "wait until page loads");
	Actions.click(WorkFlow.activityFeedHeader, "click on activity feed");
	Global.minglePageLoad_Social();
    }
    
	/*********************COMPLETE WF from StreamsHeader*******************/
    public static void complete_WorkFlow(String wfname) throws ParseException
    {
    	//Actions.switchToDefaultContent();
    	start_WorkFlow(wfname);
    	verify_WorkFlow(wfname);
    	//verify_Data("Work flow Message");
    }
    
    
    
    /*********************start Multiple tasks WF from StreamsHeader*******************/
    public static void start_MultiWorkFlow(String multitaskwf) throws ParseException
    {
    	//Actions.switchToDefaultContent();
    	RM_Social.navigateToActivityPage();
    	navigate_StreamsWF();
    	Actions.pause(2);
    	Actions.click(WorkFlow.addWorkFlows, "click on add work flows");
    	Actions.click(WorkFlow.select_WF, "click drop down to select Work flow");
    	Actions.click(By.xpath("//li[@data-value='"+multitaskwf+"']"), "select created WF");
    	Actions.pause(2);
    	Actions.click(WorkFlow.start_Btn, "click start button");
    	Global.minglePageLoad_Social();
    	verifyWFStatuses(multitaskwf);
    	Actions.verifyElement(WorkFlow.activityFeedHeader, "wait until page loads");
    	Actions.click(WorkFlow.activityFeedHeader, "click on activity feed");
    	Global.minglePageLoad_Social();
    	verify_taskscompletion(multitaskwf);
    	//verify_Data("Work flow Message");
    }
     
    /****************** Verfiy the Tasks in Workflow******************/
    
    public static void verifyWFStatuses(String wfname)
    {
    	String status=Actions.getText(By.xpath("//div[@title='"+wfname+"']/following::span"));
    	System.out.println("Work flow is "+status);
    }
    
    /****************** cancel Workflow******************/
    public static void cancel_WorkFlow(String wfname)
    {
    	RM_Social.navigateToActivityPage();
    	navigate_StreamsWF();
    	Actions.pause(2);
    	Actions.click(WorkFlow.addWorkFlows, "click on add work flows");
    	Actions.click(WorkFlow.select_WF, "click drop down to select Work flow");
    	Actions.click(By.xpath("//li[@data-value='"+wfname+"']"), "select created WF");
    	Actions.pause(2);
    	Actions.click(WorkFlow.start_Btn, "click start button");
    	Global.minglePageLoad_Social();
    	verifyWFStatuses(wfname);
    	Actions.click(By.xpath("//div[@title='"+wfname+"']"), "select Work flow");
    	Actions.click(WorkFlow.cancel_WFBtn, "cancel WF");
    	Actions.click(WorkFlow.workflow_Link, "click on workflow link");
    	verifyWFStatuses(wfname);
    	
    	remove_WorkFlow(wfname);
    }
    
    /****************** remove Workflow******************/
    public static void remove_WorkFlow(String wfname)
    {
    	Actions.click(By.xpath("//div[@title='"+wfname+"']"), "select Work flow");
    	Global.minglePageLoad_Social();
    	Actions.click(WorkFlow.remove_WFBtn, "remove WF");
    	Actions.verifyElement(WorkFlow.deleteWF_prompt, "Prompt when removing a Workflow");
    	Actions.click(WorkFlow.yes_Btn, "click yes button");
    	
    }
    
    
    /****************** verify created Workflow ******************/
    
    public static void verify_WorkFlow(String wfname) throws ParseException
    {
    	
   long differenceMinutes = getTime();
   System.out.println(differenceMinutes + " minutes, ");
    if(differenceMinutes<=2)
    {
           Actions.click(WorkFlow.showDetails_WF, "click on show details");
           verify_assignToMe();
           navigate_StreamsWF();
           verifyWFStatuses(wfname);
           remove_WorkFlow(wfname);
           
    }
    else
    	System.out.println("Workflow creation is Failed");
    }
    
    /****************** verify tasks completion from streams ******************/
    
    public static void verify_taskscompletion(String multitaskwf) throws ParseException
    {
    	
   long differenceMinutes = getTime();
   System.out.println(differenceMinutes + " minutes, ");
    if(differenceMinutes<=2)
    {
    	   completetask1();
    	   completetask2();
    	   completeNotif1();
           String finalmsg=Actions.getText(By.xpath(" //div[contains(text(),'Notification 1')]"));
           System.out.println(finalmsg);
           navigate_StreamsWF();
           verifyWFStatuses(multitaskwf);
           //Actions.verify(status, expected);
           remove_WorkFlow(multitaskwf);
           
    }
    else
    	System.out.println("Workflow creation is Failed");
    }
    

   /****************** Complete TASK 1 in Activity page ******************/
    
    public static void completetask1()
    {
    String msg1=Actions.getText(By.xpath("//div[contains(text(),'Task 1')]"));
	System.out.println(msg1);
    Actions.click(WorkFlow.showDetails_WF, "click on show details");
    verify_assignToMe();
    Actions.click(WorkFlow.activityFeedHeader, "click on activity feed");
	Global.minglePageLoad_Social();
    }
    
    
 /****************** Complete TASK 2 in Activity page ******************/
    
    public static void completetask2()
    {
    String msg1=Actions.getText(By.xpath("//div[contains(text(),'Task 2')]"));
	System.out.println(msg1);
    Actions.click(WorkFlow.showDetails_WF, "click on show details");
    verify_assignToMe();
    Actions.click(WorkFlow.activityFeedHeader, "click on activity feed");
	Global.minglePageLoad_Social();
    }
    
 /****************** Complete NOTIFICATION 1 in Activity page ******************/
    
    public static void completeNotif1()
    {
    String msg3=Actions.getText(By.xpath("//div[contains(text(),'Notification 1')]"));
	System.out.println(msg3);
    Actions.click(WorkFlow.showDetails_WF, "click on show details");
    Actions.pause(.5);
    Actions.click(WorkFlow.done_Btn, "click on Done");
    Global.minglePageLoad_Social();
    Actions.click(WorkFlow.activityFeedHeader, "click on activity feed");
    Global.minglePageLoad_Social();
    }
    
    /****************** verify assign to ME ******************/
    
    public static void verify_assignToMe()
    {
    Actions.verifyElement(WorkFlow.assignToMe, "Element present assign to Me");
    Actions.click(WorkFlow.assignToMe, "click on assign to Me");
    Actions.verifyElement(WorkFlow.done_Btn, "Verify presence of  'Done' button");
    Actions.pause(2);
    Actions.click(WorkFlow.done_Btn, "click on Done");
    Global.minglePageLoad_Social();
    }
    
	/*********************Verify 'Assigned Himself/Assign to Other user*******************/
    public static void start_WorkFlowOtherUser(String wfname,String user) throws ParseException
    {
    	//Actions.switchToDefaultContent();
    	RM_Social.navigateToActivityPage();
    	navigate_StreamsWF();
    	Actions.pause(2);
    	Actions.click(WorkFlow.addWorkFlows, "click on add work flows");
    	Actions.click(WorkFlow.select_WF, "click drop down to select Work flow");
    	Actions.click(By.xpath("//li[@data-value='"+wfname+"']"), "select created WF");
    	Actions.pause(2);
    	Actions.click(WorkFlow.start_Btn, "click start button");
    	Global.minglePageLoad_Social();
    	verifyWFStatuses(wfname);
    	Actions.verifyElement(WorkFlow.activityFeedHeader, "wait until page loads");
    	Actions.click(WorkFlow.activityFeedHeader, "click on activity feed");
    	Global.minglePageLoad_Social();
    	verify_AssigntoOtherUser();
    	//verify_Data("Work flow Message");
    }
    
    
    
    /*********************Complete task from Assign to Other user*******************/
    public static void verify_AssigntoOtherUser() throws ParseException
    {
    
    	long differenceMinutes = getTime();
        System.out.println(differenceMinutes + " minutes, ");
      if(differenceMinutes<=2)
      {
             Actions.click(WorkFlow.showDetails_WF, "click on show details");
             Actions.click(WorkFlow.assign, "click on assign");
         	 Actions.click_JS(By.xpath("//button[@title='Assign']/following::div[@title='Assign']/descendant::div/span[contains(text(),'Test14')]"), "select user");
             Actions.pause(2);
      }
      else
      	System.out.println("Workflow creation is Failed");
    	
    	
    }
    
    
/****************** verify Assign to Other user ******************/
    
    public static void complete_WorkFlowOtherUser(String wfname,String user) throws ParseException
    
    {	
    	
    	RM_Social.navigateToActivityPage();
    	Global.minglePageLoad_Social();
        long differenceMinutes = getTime();
        System.out.println(differenceMinutes + " minutes, ");
    if(differenceMinutes<=2)
    {
           Actions.click(WorkFlow.showDetails_WF, "click on show details");
           Actions.click(WorkFlow.done_Btn, "click on Done");
           
    }
    else
    	System.out.println("Workflow creation is Failed");
    }
    
    /****************** REMOVE task after Assign to Other user ******************/
    
 public static void remove_WorkFlowOtherUser(String wfname) throws ParseException
    
    {	
    	RM_Social.navigateToActivityPage();
    	navigate_StreamsWF();
    	Global.minglePageLoad_Social();
        verifyWFStatuses(wfname);
        remove_WorkFlow(wfname);
           
    }
    
    /****************** Navigate to TASKS window ******************/
    
    public static void navigate_TasksWindow()
    {
    	Actions.switchToDefaultContent();
    	Actions.click(ShellHeader.userMenu, "Click on User Mneu");
		Actions.verifyElement(WorkFlow.tasks, "Verify presence of 'Menu' Item");
		Actions.click(WorkFlow.tasks, "Click on TASKS");
		Actions.switchtoFrame(Global.socialCLFrame, "switch to social frame");
		//Actions.verifyElementPresent(WorkFlow.Taskspage, "wait until tasks page loads");
	}
    
    
    /****************** complete tasks from TASKS window ******************/
        
    public static void completetask_TasksWindow(String wfname) throws ParseException
    {
    	RM_Social.navigateToActivityPage();
    	navigate_StreamsWF();
    	Actions.pause(2);
    	Actions.click(WorkFlow.addWorkFlows, "click on add work flows");
    	Actions.click(WorkFlow.select_WF, "click drop down to select Work flow");
    	Actions.click(By.xpath("//li[@data-value='"+wfname+"']"), "select created WF");
    	Actions.pause(2);
    	Actions.click(WorkFlow.start_Btn, "click start button");
    	Global.minglePageLoad_Social();
    	verifyWFStatuses(wfname);
    	//Actions.switchToDefaultContent();
    	Actions.click(ActivityFeed.lnk_Activityfeed, "Click On Activity feed");
    	Global.minglePageLoad_Social();
    	//verify_WorkFlow(wfname);
    	
    }
    
    /******************ADD parameters******************/
    public static void add_parameters()
    {
    Actions.click(WorkFlow.addparameters_Btn, "click on add parameters");
    Actions.pause(.5);
	Actions.click(WorkFlow.parameterType, "click to select parameter type");
    }
    
    /******************select and Save parameters******************/
    public static void save_parameters()
    {
    Actions.click(WorkFlow.input_ChkBox, "input check box");
	Actions.click(WorkFlow.useInitialVal_ChkBox, "Use initial value if NUll check box");
	Actions.click(WorkFlow.ok_Btn, "click OK button");
	Actions.pause(.5);
    }
    
    /******************Create a Task with all parameters******************/
    
    public static void createTask_AllParameters(String wfname,String message,String user1,String user2)
    {
    	Actions.click(WorkFlow.collapseIcon, "collapse icon");
    	Actions.click(WorkFlow.addparameters_Btn, "click on add parameters");
    	Actions.type(WorkFlow.parameterName,"string", "enter parameter name");
    	Actions.click(WorkFlow.input_ChkBox, "input check box");
    	Actions.click(WorkFlow.useInitialVal_ChkBox, "Use initial value if NUll check box");
    	Actions.type(WorkFlow.initialValue, "Automation test", "enter initial string value");
    	Actions.click(WorkFlow.ok_Btn, "click OK button");
    	Actions.pause(1);
    	add_parameters();
    	Actions.click(WorkFlow.type_boolean, "select type BOOLEAN");
    	Actions.type(WorkFlow.parameterName,"Boolean", "enter parameter name");
    	save_parameters();
    	
    	add_parameters();
    	Actions.click(WorkFlow.type_Integer, "select type INTEGER");
    	Actions.type(WorkFlow.parameterName,"Integer", "enter parameter name");
    	save_parameters();
    	
    	add_parameters();
    	Actions.click(WorkFlow.type_Decimal, "select type DECIMAL");
    	Actions.type(WorkFlow.parameterName,"Decimal", "enter parameter name");
    	save_parameters();
    	
    	add_parameters();
    	Actions.click(WorkFlow.type_Code, "select type CODE");
    	Actions.type(WorkFlow.parameterName,"Code", "enter parameter name");
    	Actions.click(WorkFlow.input_ChkBox, "input check box");
    	Actions.click(WorkFlow.useInitialVal_ChkBox, "Use initial value if NUll check box");
    	Actions.click_JS(WorkFlow.select_code,"click dropdown");
    	Actions.pause(.5);
    	Actions.click(WorkFlow.code_Approved, "select code approved");
    	Actions.click(WorkFlow.ok_Btn, "click OK button");
    	Actions.pause(.5);
    	
    	add_parameters();
    	Actions.click(WorkFlow.type_Date, "select type DATE");
    	Actions.type(WorkFlow.parameterName,"Date", "enter parameter name");
    	save_parameters();
    	
    	add_parameters();
    	Actions.click(WorkFlow.type_DateNTime, "select type DATE N TIME");
    	Actions.type(WorkFlow.parameterName,"DateTime", "enter parameter name");
    	save_parameters();
    	
    	add_parameters();
    	Actions.click(WorkFlow.type_HyperLink, "select type Hyperlink");
    	Actions.type(WorkFlow.parameterName,"Hyperlink", "enter parameter name");
    	Actions.click(WorkFlow.input_ChkBox, "input check box");
    	Actions.click(WorkFlow.useInitialVal_ChkBox, "Use initial value if NUll check box");
    	Actions.type(WorkFlow.hyperLink_initialValue, "http://www.infor.com/", "Enter link");
    	Actions.click(WorkFlow.ok_Btn, "click OK button");
    	Actions.pause(1);
    	
    	Actions.click(WorkFlow.task1, "select task");
    	properties_WF(message,user1,user2);
    	Actions.click(WorkFlow.prop_content, "click content");
    	Actions.click(WorkFlow.type_chkBx, "select all parameters");
    	Actions.click(WorkFlow.addParameters_toTask,"Add parameters");
    	save_WF();
    	Actions.pause(.5);
    	activate_workFlow(wfname);
    	workFlowAuth(wfname);
    	
    }
    
/******************Start a Task with all parameters in Streams page******************/
    
    public static void startTask_AllParameters(String wfname) throws ParseException
    {
    	start_WorkFlow(wfname);
    	complete_Task_AllParameters(wfname);
    	
    }
 
/****************** verify task with all parameters in TASK overlay******************/
    
    public static void complete_Task_AllParameters(String wfname) throws ParseException
    
    {	
    	
    	/*RM_Social.navigateToActivityPage();
    	Global.minglePageLoad_Social();*/
        long differenceMinutes = getTime();
        System.out.println(differenceMinutes + " minutes, ");
    if(differenceMinutes<=2)
    {
           Actions.click(WorkFlow.showDetails_WF, "click on show details");
           Actions.pause(1);
           verify_parameters("string");
           verify_parameters("Boolean");
           verify_parameters("Integer");
           verify_parameters("Decimal");
           verify_parameters("Code");
           verify_parameters("Date");
           verify_parameters("Date Time");
           verify_parameters("Hyperlink");
           Actions.click(WorkFlow.assignToMe, "click on assign to me");
           Global.minglePageLoad_Social();
           Actions.click(WorkFlow.done_Btn, "click on Done");
           Global.minglePageLoad_Social();
           navigate_StreamsWF();
           verifyWFStatuses(wfname);
           remove_WorkFlow(wfname);
           
    }
    else
    	System.out.println("Workflow creation is Failed");
    }
    
    
    /****************** verify all parameters in TASK overlay******************/
    
    public static void verify_parameters(String parameter) 
    {
    	Actions.verifyElement(By.xpath("//label[@title='"+parameter+"']"), "parameter name:"+parameter);
    	
	}


    
    /******************GET TIME******************/
    
    
    public static long getTime() throws ParseException{
    	 Actions.pause(3);
    	    //Actions.verifyElementPresent(By.xpath("//div[@class='infor-social-timePost infor-social-timePostMargin floatRight m-txt-f14']"), "timestamp");
    	    String date=Actions.getText(By.xpath("//div[@class='infor-social-timePost infor-social-timePostMargin floatRight m-txt-f14']"));
    	    System.out.println(date+"Print");
    	    String[] val1=date.split(" ");
    	    System.out.println(val1[2]+" "+val1[3]);
    	    String workFlowDate=val1[2];
    	    Date date1=new SimpleDateFormat("HH:mm").parse(workFlowDate);
    	    DateFormat df = new SimpleDateFormat("HH:mm");
    	    Date dateobj = new Date();
    	    long difference = dateobj.getTime() - date1.getTime();

    	   long differenceMinutes = difference / (60 * 1000) % 60;
    	   System.out.println(differenceMinutes + " minutes, ");
		return differenceMinutes;
    }
    
    /******************Display of Activity Locator in Tasks,Activity feed page and Search ******************/
    
    public static void display_ActivityLocator(String wfname) throws ParseException
    {
      start_WorkFlow(wfname);
      long differenceMinutes = getTime();
      System.out.println(differenceMinutes + " minutes, ");
       if(differenceMinutes<=2)
       {
             /* Actions.click(WorkFlow.showDetails_WF, "click on show details");
              Global.minglePageLoad_Social();*/
              Actions.click(WorkFlow.activitylocator_Icon, "click on activity locator");
              String taskid=Actions.getText(WorkFlow.taskID_WF);
              Actions.verifyElement(By.xpath("//h2[contains(text(),'"+wfname+"')]"), "Activity loctor in activity feed page");
              Actions.click(WorkFlow.activitylocator_Close, "close activity locator");
              Actions.switchToDefaultContent();
              Actions.click(WorkFlow.searchIcon, "click on search Icon");
              Actions.type(WorkFlow.startTyping, "Task 1 Message", "search for task");
              Actions.enter();
              String searchtaskID=Actions.getText(By.xpath("//a[@class='a_activity-locator ng-binding']"));
              String[] s=searchtaskID.split(":");
              String searchID=s[0]+": "+s[1];
              System.out.println(searchID);
            if(searchID.equalsIgnoreCase(taskid))
            {
            	Actions.click(By.xpath("//a[@class='a_activity-locator ng-binding']"),"activity locator");
            	Actions.verifyElement(By.xpath("//h4[contains(text(),'"+wfname+"')]"), "Activity loctor in activity feed page");
            	Actions.click(WorkFlow.activitylocator_Close, "close activity locator");
            	Actions.click(WorkFlow.search_Close, "close search");
            }
              
            display_ActivityLocatorTask(wfname);
              
       }
       else
       	System.out.println("Workflow creation is Failed");
      
    }
    
/******************Display of Activity Locator in Tasks page******************/

       public static void display_ActivityLocatorTask(String wfname) throws ParseException
       {
          navigate_TasksWindow();
          long differenceMinutes = getTime();
          System.out.println(differenceMinutes + " minutes, ");
           if(differenceMinutes<=2)
           {      
        	      Actions.click(WorkFlow.activitylocator_Icon, "click on activity locator");
        	      Global.minglePageLoad_Social();
        	      Actions.verifyElement(By.xpath("//h2[contains(text(),'"+wfname+"')]"), "Activity loctor in activity feed page");
        	      Actions.click(WorkFlow.activitylocator_Close, "close activity locator");
                  Actions.click(WorkFlow.showDetails_WF, "click on show details");
                  verify_assignToMe();
                  navigate_StreamsWF();
                  verifyWFStatuses(wfname);
                  remove_WorkFlow(wfname);
                  
           }
           else
           	System.out.println("Workflow creation is Failed");
           }
  
/////////////////////////////////////////////////////O-O-O/////////////////////////////////////////////////////////////////////
       
       public static void cannotAssignTaskto_OOOUser(String user1)
       {
        RM_Admin.navigateToMenu("User Settings");
		//Actions.pause(10);
		Actions.switchtoFrame(Global.socialCLFrame, "Switch to social");
		Actions.verifyElement(ShellHeader.userMenu_UserSettings_ProfileInformationHeading, "Profile Information");
		Global.minglePageLoad_Social();
		addRule_ooosettings(user1);
		ooo_enableooSwitch();
		Actions.click(OOOsettings.ooo_SaveBtn, "save changes");
		Global.minglePageLoad_Social();
		Actions.click(OOOsettings.returnToProfile_Btn,"click on return to profile");
		Global.minglePageLoad_Social();
		String actual=Actions.getText(OOOsettings.profilePage_oooStatus);
		Actions.verifyString(actual, "Out of office.");
		
       }
       
       
       /******************Multiple Rule_ooosettings ******************/
       
       public static void multiplerules_OOOUser(String user)
       {
        RM_Admin.navigateToMenu("User Settings");
		//Actions.pause(10);
		Actions.switchtoFrame(Global.socialCLFrame, "Switch to social");
		Actions.verifyElement(ShellHeader.userMenu_UserSettings_ProfileInformationHeading, "Profile Information");
		Global.minglePageLoad_Social();
		//addRule_ooosettings(user1);
		Actions.click(OOOsettings.add_Rule, "click on add rule");
		addRule_ooosettings(user);
		ooo_enableooSwitch();
		Actions.click(OOOsettings.ooo_SaveBtn, "save changes");
		Global.minglePageLoad_Social();
		Actions.click(OOOsettings.returnToProfile_Btn,"click on return to profile");
		Global.minglePageLoad_Social();
		Actions.getText(OOOsettings.profilePage_oooStatus);
		
       }
       
       
 /******************Multiple Rule_ooosettings ******************/
       
       public static void Datetimerange_OOOUser()
       {
           
        RM_Admin.navigateToMenu("User Settings");
		//Actions.pause(10);
		Actions.switchtoFrame(Global.socialCLFrame, "Switch to social");
		Actions.verifyElement(ShellHeader.userMenu_UserSettings_ProfileInformationHeading, "Profile Information");
		Global.minglePageLoad_Social();
		//addRule_ooosettings(user1);
		 Calendar c = Calendar.getInstance();

         c.setTime(new Date()); // Now use today date.

         c.add(Calendar.DATE, 2); // 
         Date newDate = c.getTime();
         Date newDate1 =new Date();
         DateFormat dateFormat = new SimpleDateFormat("dd");
         String startDate=dateFormat.format(newDate1);
         String endDate=dateFormat.format(newDate);
         System.out.println(startDate);
         System.out.println(endDate);
		Actions.click(OOOsettings.startDateandTime_Switch, "Enable Start date switch");
		Actions.click(OOOsettings.startDate_input,"give present date");
		//Actions.type(OOOsettings.startDate_input, startDate, "click present date");
		Actions.click(OOOsettings.startdatepicker, "Start Date Cal");
		Actions.pause(.5);
		Global.minglePageLoad_Social();
		Actions.click(OOOsettings.datepicker_todayDate, "Select Start Date Cal");
		Actions.pause(2);
		Actions.click(OOOsettings.endDateandTime_Switch, "Enable end date switch");
		Actions.pause(2);
		Actions.click(OOOsettings.startDate_input,"click present date");
		Actions.click(OOOsettings.enddatepicker, "End Date Cal");
		Actions.pause(.5);
		Global.minglePageLoad_Social();
		//Actions.type(OOOsettings.startDate_input, endDate, "give present date");
		Actions.click(By.xpath("//a[text()='"+endDate+"']"), "Select End Date Date Cal");
		Actions.pause(2);
		String retreived_startDate=Actions.getAttribute(OOOsettings.startDate_input, "value");
		String retreived_EndDate=Actions.getAttribute(OOOsettings.endDate_input, "value");
		Actions.click(OOOsettings.ooo_SaveBtn, "save changes");
		Actions.pause(1);
		ooo_enableooSwitch();
		Actions.click(OOOsettings.ooo_SaveBtn, "save changes");
		Global.minglePageLoad_Social();
		Actions.click(OOOsettings.returnToProfile_Btn,"click on return to profile");
		Global.minglePageLoad_Social();
		String dateDetails=Actions.getText(OOOsettings.profilePage_oooStatus);
		String details[]=dateDetails.split(" ");
        System.out.println(details[4]+" "+details[5]+" "+details[6]);
        String returnProfileStartDate=details[4]+" "+details[5]+" "+details[6];
        String[] val=details[10].split("\\.");
        String returnProfileEndDate=details[8]+" "+details[9]+" "+val[0];
        System.out.println(returnProfileStartDate+"*************"+returnProfileEndDate);
       Actions.verifyString(retreived_startDate, returnProfileStartDate);
       Actions.verifyString(retreived_EndDate, returnProfileEndDate);
       }
       
       
       /******************addRule_ooosettings ******************/
       
       public static void addRule_ooosettings(String user1)
       {
        //Actions.click(OOOsettings.add_Rule, "click on add rule");
        ooo_tasksSwitch();
		ooo_activateruleSwitch();
		Actions.type(OOOsettings.delegateto_Rule,"qa", "Enter User");
		Actions.pause(1);
		Actions.click(By.xpath("//div[@id='liveSearchResultContainer']/descendant::div[@title='"+user1+"']"), "select"+user1);
		Global.minglePageLoad_Social();
       }
       
       /****************** rollback_OOOSettings for user 12 ******************/
       
       public static void rollback_OOOSettings()
       {
    	   
    	RM_Social.navigateToActivityPage();
    	//Global.minglePageLoad_Social();
   		if(Actions.verifyElementPresent(OOOsettings.popup_OOOsettings, "present")){
   		Actions.click(OOOsettings.popup_NoBtn, "click NO button");
   		}
   		Actions.switchToDefaultContent();
    	RM_Admin.navigateToMenu("User Settings");
    	//Global.minglePageLoad_Social();
   		//Actions.pause(10);
   		//Actions.explicitWait_VisibilityOfElement(ShellHeader.userMenu_UserSettings_ProfileInformationHeading);
    	Actions.switchtoFrame(Global.socialCLFrame, "Switch to social");
   		Actions.verifyElement(ShellHeader.userMenu_UserSettings_ProfileInformationHeading, "Profile Information");
   		Global.minglePageLoad_Social();
   		Actions.click(OOOsettings.enableooo_Switch, "Turn OFF OOO switch");
		Actions.click(OOOsettings.ooo_SaveBtn, "save changes");
		/*Global.minglePageLoad_Social();
		Actions.switchToDefaultContent();
		Global.minglePageLoad_Social();
		Actions.click(OOOsettings.delete_Rule, "DELETE RULE");
		Actions.click(OOOsettings.delete_RuleYesBtn, "click yes button");
		Actions.click(OOOsettings.ooo_SaveBtn, "save changes");
		if(Actions.verifyElementPresent(By.xpath("//div[@class='inlineBlock infor-mingle-outOfOfficeRulesErrorMsg']"),"Verify presence of ION Update")){
			do{
				Actions.refresh();
				}while(!Actions.verifyElementPresent(By.xpath("//div[@class='inlineBlock infor-mingle-outOfOfficeRulesErrorMsg']"),"Verify presence of ION Update"));
			Actions.click(OOOsettings.delete_Rule, "DELETE RULE");
			Actions.click(OOOsettings.delete_RuleYesBtn, "click yes button");
			Actions.click(OOOsettings.ooo_SaveBtn, "save changes");
		}*/
       }
       
       
       public static void rollback_OOOSettings1(){
        RM_Admin.navigateToMenu("User Settings");
		Actions.switchtoFrame(Global.socialCLFrame, "Switch to social");
		Actions.verifyElement(ShellHeader.userMenu_UserSettings_ProfileInformationHeading, "Profile Information");
		Global.minglePageLoad_Social();
		Actions.pause(3);
		Actions.click(OOOsettings.startDateandTime_Switch, "switch off start date");
		Actions.click(OOOsettings.endDateandTime_Switch, "switch off end date");
		Actions.click(OOOsettings.delete_Rule, "DELETE RULE");
		Actions.click(OOOsettings.delete_RuleYesBtn, "click yes button");
		Actions.click(OOOsettings.ooo_SaveBtn, "save changes");
		Global.minglePageLoad_Social();
		Actions.click(OOOsettings.delete_Rule, "DELETE RULE");
		Actions.click(OOOsettings.delete_RuleYesBtn, "click yes button");
		Actions.click(OOOsettings.ooo_SaveBtn, "save changes");
		Global.minglePageLoad_Social();
       }
       /****************** verify created Workflow ******************/
       
       public static void verify_OOOmessage(String wfname) throws ParseException
       {
       	
      long differenceMinutes = getTime();
      System.out.println(differenceMinutes + " minutes, ");
       if(differenceMinutes<=2)
       {
              Actions.click(WorkFlow.showDetails_WF, "click on show details");
              Actions.click(WorkFlow.assign, "click on assign");
          	  Actions.click_JS(By.xpath("//button[@title='Assign']/following::div[@title='Assign']/descendant::div/span[contains(text(),'Test12')]"), "select user");
          	  Global.minglePageLoad_Social();
              Actions.pause(.5);
              Actions.getText(By.xpath("//div[@class='infor-save-success-tooltip infor-save-error']"));
              Actions.click(WorkFlow.close_taskpopup, "close task pop up");
              //verify_assignToMe();
              navigate_StreamsWF();
              Actions.pause(2);
              Actions.click(By.xpath("//div[@title='"+wfname+"']"), "select Work flow");
          	  Actions.click(WorkFlow.cancel_WFBtn, "cancel WF");
          	  Global.minglePageLoad_Social();
           	  Actions.click(WorkFlow.remove_WFBtn, "remove WF");
        	  Actions.verifyElement(WorkFlow.deleteWF_prompt, "Prompt when removing a Workflow");
        	  Actions.click(WorkFlow.yes_Btn, "click yes button");
          	  Actions.click(WorkFlow.workflow_Link, "click on workflow link");
          	  verifyWFStatuses(wfname);
          	  //remove_WorkFlow(wfname);
              
       }
       else
       	System.out.println("Workflow creation is Failed");
       }
       
              /******************verifydelegate_ooosettings 
             * @throws ParseException ******************/
       
       public static void verifydelegate_ooosettings(String wfname) throws ParseException
       {
    	   long differenceMinutes = getTime();
    	      System.out.println(differenceMinutes + " minutes, ");
    	       if(differenceMinutes<=2)
    	       {
    	              Actions.click(WorkFlow.showDetails_WF, "click on show details");
    	              Actions.click(WorkFlow.assign, "click on assign");
    	          	  Actions.click_JS(By.xpath("//button[@title='Assign']/following::div[@title='Assign']/descendant::div/span[contains(text(),'Test11')]"), "select user");
    	          	  Global.minglePageLoad_Social();
    	              Actions.pause(.5);
    	              //Actions.getText(By.xpath("//div[@class='infor-save-success-tooltip infor-save-error']"));
    	              Actions.click(WorkFlow.done_Btn, "click done");
    	              Global.minglePageLoad_Social();
    	              //verify_assignToMe();
    	              navigate_StreamsWF();
    	              Actions.pause(2);
    	              Actions.click(By.xpath("//div[@title='"+wfname+"']"), "select Work flow");
    	          	  /*Actions.click(WorkFlow.cancel_WFBtn, "cancel WF");
    	          	  Global.minglePageLoad_Social();*/
    	           	  Actions.click(WorkFlow.remove_WFBtn, "remove WF");
    	        	  Actions.verifyElement(WorkFlow.deleteWF_prompt, "Prompt when removing a Workflow");
    	        	  Actions.click(WorkFlow.yes_Btn, "click yes button");
    	          	  Actions.click(WorkFlow.workflow_Link, "click on workflow link");
    	          	  verifyWFStatuses(wfname);
    	          	  //remove_WorkFlow(wfname);
    	              
    	       }
    	       else
    	       	System.out.println("Workflow creation is Failed");
    	       }
       
       /******************OOO TASKS Switch******************/
       
       public static void ooo_tasksSwitch()
       {
		Actions.scrollToElement(OOOsettings.tasks_Switch);
		Actions.makeElementVisible("", OOOsettings.tasks_Switch);
		if(!Actions.isChecked(OOOsettings.tasks_Switch))
		{
			//Actions.pause(2);
			Actions.scrollToElement(OOOsettings.tasks_Switch);
			Actions.pause(2);
			Actions.click(OOOsettings.tasks_Switch, "Turn ON Tasks Switch");
		}
		else
		System.out.println(Actions.isChecked(OOOsettings.tasks_Switch));
       }
       
/******************OOO TASKS Switch OFF******************/
       
       public static void ooo_tasksSwitchOff()
       {
		Actions.scrollToElement(OOOsettings.tasks_Switch);
		Actions.makeElementVisible("", OOOsettings.tasks_Switch);
		if(Actions.isChecked(OOOsettings.tasks_Switch))
		{
			//Actions.pause(2);
			Actions.scrollToElement(OOOsettings.tasks_Switch);
			Actions.pause(2);
			Actions.click(OOOsettings.tasks_Switch, "Turn OFF Tasks Switch");
		}
		System.out.println(Actions.isChecked(OOOsettings.tasks_Switch));
       }
       
       /******************OOO Activate this rule Switch******************/
       
		public static void ooo_activateruleSwitch()
		{
		Actions.scrollToElement(OOOsettings.activatethisrule_Switch);
		Actions.makeElementVisible("",OOOsettings.activatethisrule_Switch);
		if(!Actions.isChecked(OOOsettings.activatethisrule_Switch))
		{
			//Actions.pause(2);
			Actions.scrollToElement(OOOsettings.activatethisrule_Switch);
			Actions.pause(2);
			Actions.click(OOOsettings.activatethisrule_Switch, "Turn ON Activate this rule Switch");
       }
		else
		System.out.println(Actions.isChecked(OOOsettings.activatethisrule_Switch));
      }
		
		/******************OOO Activate this rule Switch OFF******************/
	       
		public static void ooo_activateruleSwitchOff()
		{
		Actions.scrollToElement(OOOsettings.activatethisrule_Switch);
		Actions.makeElementVisible("",OOOsettings.activatethisrule_Switch);
		if(Actions.isChecked(OOOsettings.activatethisrule_Switch))
		{
			//Actions.pause(2);
			Actions.scrollToElement(OOOsettings.activatethisrule_Switch);
			Actions.pause(2);
			Actions.click(OOOsettings.activatethisrule_Switch, "Turn OFF Activate this rule Switch");
       }
		System.out.println(Actions.isChecked(OOOsettings.activatethisrule_Switch));
      }
		
		/******************Enable OOO Switch******************/
		public static void ooo_enableooSwitch()
		{
		Actions.scrollToElement(OOOsettings.enableooo_Switch);
		Actions.makeElementVisible("",OOOsettings.enableooo_Switch);
		if(!Actions.isChecked(OOOsettings.enableooo_Switch))
		{
			//Actions.pause(2);
			Actions.scrollToElement(OOOsettings.enableooo_Switch);
			Actions.pause(2);
			Actions.click(OOOsettings.enableooo_Switch, "Enable OOO switch");
          }
		else
		System.out.println(Actions.isChecked(OOOsettings.enableooo_Switch));
		}
       
       

		/******************Enable OOO Switch OFF******************/
		public static void ooo_enableooSwitchoff()
		{
		//Actions.scrollToElement(OOOsettings.enableooo_Switch);
		//Actions.makeElementVisible("",OOOsettings.enableooo_Switch);
		//if(Actions.isChecked(OOOsettings.enableooo_Switch))
		//{
			/*//Actions.pause(2);
			Actions.scrollToElement(OOOsettings.enableooo_Switch);
			Actions.pause(2);*/
			Actions.click(OOOsettings.enableooo_Switch, "Turn OFF OOO switch");
         // }
		System.out.println(Actions.isChecked(OOOsettings.enableooo_Switch));
		}
       
       
       
       
       
       
       
 }
