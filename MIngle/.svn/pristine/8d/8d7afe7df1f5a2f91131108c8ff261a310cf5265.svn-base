/**
 * 
 */
package reusableMethods;

import java.awt.Desktop.Action;
import java.util.HashMap;

import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebElement;

import actions.Actions;
import objRepository.Global;
import objRepository.IFS.Contacts;
import objRepository.IFS.DistributionGroup;
import objRepository.IFS.DocumentAuthorizations;
import objRepository.IFS.ERPPersonIDS;
import objRepository.IFS.ExternalUsers;
import objRepository.IFS.IFSUSERS;
import objRepository.IFS.ServiceAccounts;
import objRepository.Social.ShellHeader;
import utility.Utility;

public class RM_IFS {
	//NAVIGATE TO USER MENU
	public static void navigateToMenu(String menu)
	{
		Actions.click(ShellHeader.userMenu, "Click on User Menu");
		Actions.click(By.xpath("//span[text()='"+menu+"']"), "Click on Menu Details"+menu);
		Actions.impwait();
		//Actions.verifyElement(Global.socialCLFrame, "Verify presence of 'Social' Frame");
		Actions.switchtoFrame(Global.socialCLFrame, "Switch to the Frame");
		Actions.verifyElement(IFSUSERS.propertyDrpoDown, "Property Drop Down");
	}

	//SELECT MAILADDRESS
	public static void searchMailID(By property,String userEmail){	
		Actions.verifyElement(IFSUSERS.enterEmailAddress, "Verify presence of 'EmailAddress'");
		Actions.pause(.5);
		Actions.type(IFSUSERS.enterEmailAddress,userEmail,"User Mail Address");
		Actions.pause(.5);
		Actions.verifyElement(IFSUSERS.searchProperty, "Verify presence of 'Property Search'");
		Actions.click(IFSUSERS.searchProperty, "Click on Property Search");
		Actions.pause(2);
	}

	//DRILL DOWN USER
	public static void drillDownUser(String user)
	{
		Actions.verifyElement(By.xpath("//div[text()='"+user+"']/../descendant::a[@class='drilldown ']/span"), "Drill Down");
		Actions.moveTo(By.xpath("//div[text()='"+user+"']/../descendant::a[@class='drilldown ']/span"), "Moveto Drill Down User");
		//Actions.pause(2);
		//JavaScriptLibrary.CallEmbeddedSelenium(U, "triggerMouseEventAt", element, "click", "0,0");
		Actions.click(By.xpath("//div[text()='"+user+"']/../descendant::a[@class='drilldown ']/span"), "Drill Down User");
		//Actions.enter();
	}

	//Drill DOwn Distribution Group

	public static void drillDistributionGroup(String dgName){
		Actions.verifyElement(By.xpath("//div[text()='"+dgName+"']/../descendant::a/span"), "Drill Down");
		Actions.moveTo(By.xpath("//div[text()='"+dgName+"']/../descendant::a/span"), "Moveto Drill Down group");
		Actions.click(By.xpath("//div[text()='"+dgName+"']/../descendant::a/span"), "Click On Drill Down Group Name");
	}

	//SAVE IFS ITEM
	public static void saveIFSITEM()
	{
		Actions.click(IFSUSERS.saveIFS, "Save IFS ITEM");
	}


	//ADD SECURITY ROLEBUTTON
	public static void addSecurity(String secRole)
	{
		Actions.pause(1);
		Actions.verifyElement(IFSUSERS.addSecurityButton, "Verify presence of 'Add Security' button");
		Actions.moveTo(IFSUSERS.addSecurityButton, "Moveto Security button");
		Actions.pause(1);
		Actions.click_JS(IFSUSERS.addSecurityButton, "Add Security Button");
		Actions.verifyElement(IFSUSERS.enterSecurityRole, "Verify presence of 'Enter Security' role");
		Actions.type(IFSUSERS.enterSecurityRole,secRole,"Enter Security Role");
		Actions.pause(.5);
		Actions.moveTo(IFSUSERS.searchSecurityRole, "Moveto Search Security button");
		Actions.click_JS(IFSUSERS.searchSecurityRole, "Search Security Role");
		Actions.verifyElement(IFSUSERS.addRole, "Verify presence of 'Add Security Role'");
		Actions.moveTo(IFSUSERS.addRole, "Move to Add Security Role");
		Actions.pause(.5);
		Actions.click_JS(IFSUSERS.addRole, "Add Security Role");
		Actions.click(IFSUSERS.saveRole, "Save  Role");
		Actions.verifyElement(IFSUSERS.saveSecurityRole, "Verify presence of 'S'");
		Actions.moveTo(IFSUSERS.saveSecurityRole, "Move ToSave Security Role");
		Actions.click(IFSUSERS.saveSecurityRole, "Save Security Role");
	}

	//VERIFY AND CHECK SECURITY ROLE
	public static void checkSecurityRole(String roleDetails)
	{
		Actions.pause(2);
		Actions.verifyElement(By.xpath("//div[contains(text(),'"+roleDetails+"')]"), "Verify presence of 'Role':"+roleDetails);
		Actions.scrollToElement(By.xpath("//div[text()='"+roleDetails+"']/../descendant::div[4]/descendant::span"));
		Actions.moveTo(By.xpath("//div[text()='"+roleDetails+"']/../descendant::div[4]/descendant::span"), "Check the role:"+roleDetails);
		Actions.click(By.xpath("//div[text()='"+roleDetails+"']/../descendant::div[4]/descendant::span"), "Check the role:"+roleDetails);
	}

	//Roll Back Manager
	public static void rbManager()
	{
		Actions.pause(1);
		Actions.click(IFSUSERS.manager, "Click On Manager");
		Actions.verifyElement(IFSUSERS.closePopUp, "Verify presence of Close Popup button");
		Actions.pause(1);
		Actions.click(IFSUSERS.closePopUp, "Click On close popup Manager Details");
	}


	//Roll Back Security Role
	public static void rbSecurityRole()
	{
		Actions.moveTo(IFSUSERS.deleteSecurityRole, "Move To Delete Security Role");
		Actions.click(IFSUSERS.deleteSecurityRole, "Delete Security Role");
		Actions.click(Global.yes, "Click On Yes");
	}
	//Roll Back Alt Manager
	public static void rbAltManager()
	{
		Actions.pause(1);
		Actions.click(IFSUSERS.altManager, "Click On Alt Manager");
		Actions.verifyElement(IFSUSERS.closePopUp, "Verify presence of Close Popup button");
		Actions.pause(1);
		Actions.click(IFSUSERS.closePopUp, "Click On close popup Alt Manager Details");

	}

	//SAVE IFS

	public static void saveIFS()
	{
		Actions.click(IFSUSERS.saveIFS, "Save IFS Item");

	}


	//Delete IFS

	public static void deleteIFS()
	{
		Actions.click_JS(IFSUSERS.deleteIFSItem, "Delete IFS Item");
		if(Actions.verifyElementPresent(IFSUSERS.yesButton, "Verify presence of 'Yes' button"))
		{
			Actions.moveTo(IFSUSERS.yesButton, "Move to Yes Button");		 
			Actions.click(IFSUSERS.yesButton, "Click On Yes Button");	
		}
	}


	//CANCEL SERVICE ACCOUNTS

	public static void select_ServiceAccounts(String user)
	{

		Actions.pause(1);
		Actions.verifyElementPresent(ServiceAccounts.selectServiceAccount, "Verify presence of Select Service");
		Actions.moveTo(ServiceAccounts.selectServiceAccount, "Move To Select Service Accounts");
		Actions.click_JS(ServiceAccounts.selectServiceAccount, "Select Service Accounts");

	}

	//CANCEL SERVICE ACCOUNTS

	public static void select_MappedUser(String dgGroup,String mappedUser)
	{
		//Actions.click(By.xpath("//div[text()='"+dgGroup+"']/../descendant::div/following::a/span"), "Select DG Group");
		Actions.click(By.xpath("//div[text()='"+dgGroup+"']/../descendant::a/span"), "Select DG Group");
		Actions.click(By.xpath("//div[contains(text(),'"+mappedUser+"')]/../descendant::span"), "Select Mapped User");

	}
	//CANCEL SERVICE ACCOUNTS

	public static void cancel_ServiceAccounts()
	{
		Actions.verifyElementPresent(ServiceAccounts.downloadSeriveAccounts, "Verify presence of Download Service Accounts");
		Actions.click(ServiceAccounts.cancelSeriveAccounts, "Cancel Service Accounts");

	}

	//Verify Service Acconts
	public static void verify_ServiceAccounts(String actual)
	{

		String val=Actions.getText(ServiceAccounts.verifySeriveAccounts);
		Actions.verifyString(val, actual);

	}
	//ENTER DEPARTMENT
	public static void enter_Department(String department)
	{
		Actions.verifyElement(IFSUSERS.department, "Verify users department present");
		Actions.type(IFSUSERS.department,department,"Users Department");

	}

	//VERITY ACTIVITY TAB
	public static void verify_ActivityTab(){
		Actions.verifyElement(IFSUSERS.activityTab, "Verify Activity Tab");
		Actions.moveTo(IFSUSERS.activityTab, "Move TO Activity Tab");
		Actions.click(IFSUSERS.activityTab, "Click On Activity Tab");
		Actions.getText(IFSUSERS.activity_info);
		Actions.getText(IFSUSERS.activity_timeStamp);
		Actions.getText(IFSUSERS.activity_performedby);
	}

	//VERITY ACTIVITY TAB
	public static void verify_DistTab(String group){
		Actions.verifyElementPresent(IFSUSERS.distributionTab, "Verify Distribution Tab Presence");
		Actions.moveTo(IFSUSERS.distributionTab, " MoveTo Distribution Tab");
		Actions.click(IFSUSERS.distributionTab, "Distribution Tab");
		Actions.verifyElementPresent(By.xpath("//div[text()='"+group+"']"), group);

	}

	//SELECT USERS
	public static void select_Users()
	{
		Actions.verifyElementPresent(IFSUSERS.selectUsers, "Verify Users Presence");
		Actions.moveTo(IFSUSERS.selectUsers,"Move To Users Selected");
		Actions.click_JS(IFSUSERS.selectUsers,"Users Selected");

	}

	//SELECT USERS
	public static void select_DG(String dg)
	{
		
		Actions.pause(4);
		WebElement elementToClick = Utility.getDriver().findElement(By.xpath("//div[text()='"+dg+"']/../descendant::div[4]/descendant::span"));
		 
		 
		 
		// Scroll the browser to the element's Y position
		 
		((JavascriptExecutor)Utility.getDriver()).executeScript("window.scrollTo(0,"+elementToClick.getLocation().y+")");
		 
		 
		 
		// Click the element
		 
		elementToClick.click();
		//Actions.verifyElement(By.xpath("//div[text()='"+dg+"']/../descendant::div[4]/descendant::span"),dg);
		//Actions.click(By.xpath("//div[text()='"+dg+"']/../descendant::div[4]/descendant::span"),"Dsitribution Group selected");
		Actions.click(DistributionGroup.dist_Import,"Distribution Import");
		Actions.click(DistributionGroup.dist_Import_Close,"Distribution Import Close");
		Actions.click(DistributionGroup.dist_Export,"Distribution Export");
		Actions.pause(.9);

		Actions.moveTo(DistributionGroup.dist_Export_Close,"Distribution Export Close");
		Actions.click(DistributionGroup.dist_Export_Close,"Distribution Export Close");

	}

	//ADD IFS
	public static void add_IFS()
	{
		Actions.pause(2);
		Actions.verifyElement(IFSUSERS.addIFSItem,"Add IFS");
		Actions.moveTo(IFSUSERS.addIFSItem, "Move to Add IFS");
		Actions.click_JS(IFSUSERS.addIFSItem,"Click On Add IFS");

	}

	//ADD Create Distribution Group
	public static void create_DG(String distName,String distDesc)
	{
		Actions.type(DistributionGroup.dist_Name,distName,"Dist Name");
		Actions.type(DistributionGroup.dist_Desc,distDesc,"Dist Desc");
		Actions.verifyElement(DistributionGroup.dist_Save, "Save Distribution");
		Actions.moveTo(DistributionGroup.dist_Save, "Move To Save Distribution");
		Actions.click_JS(DistributionGroup.dist_Save, "Save Distribution");
	}



	//SELECT Manage
	public static void select_ItemFromManage(String menuItem)
	{
		Actions.verifyElement(IFSUSERS.manage, "Manage");
		Actions.moveTo(IFSUSERS.manage,"Move to Manage");
		Actions.click_JS(IFSUSERS.manage,"Click On Manage");
		Actions.verifyElement(By.xpath("//a[text()='"+menuItem+"']"), menuItem);
		Actions.moveTo(By.xpath("//a[text()='"+menuItem+"']"), "Move to Menu Details "+menuItem);
		Actions.click_JS(By.xpath("//a[text()='"+menuItem+"']"), "Click on Menu Details "+menuItem);

	}

	//SELECT Manage
	public static void select_Item(String menuItem,String subMenu)
	{
		Actions.verifyElement(IFSUSERS.manage, "Manage");
		Actions.moveTo(IFSUSERS.manage,"Move To Manage");
		Actions.click_JS(IFSUSERS.manage,"Click On Manage");
		Actions.pause(1);     				
		Actions.makeElementVisible("block", IFSUSERS.submenuVisible);
		Actions.pause(1); 
		Actions.click(By.xpath("//li[@id='groups']/ul/descendant::a[text()='"+subMenu+"']"), "Click on Menu Details "+subMenu);

	}


	//IMPORT USERS
	public static void import_Users(){
		Actions.verifyElement(IFSUSERS.importUsers, "Verify presence of 'Import Users' button");
		Actions.moveTo(IFSUSERS.importUsers, "Move To'Import Users' button");
		Actions.click_JS(IFSUSERS.importUsers, "Import Users");
		Actions.verifyElement(IFSUSERS.closeImport, "Verify presence of 'Close Import' button"); 
		Actions.click(IFSUSERS.closeImport, "Close Import");

	}

	//EXPORT USERS
	public static void export_Users(){
		Actions.verifyElement(IFSUSERS.exportUsers, "Verify presence of 'Export Users' button");
		Actions.moveTo(IFSUSERS.exportUsers, "Move To Export Users");
		Actions.click(IFSUSERS.exportUsers, "Export Users");
		Actions.verifyElement(IFSUSERS.closeExport, "Verify presence of 'Import Users' button"); 
		Actions.click(IFSUSERS.closeExport, "Close Export");

	}

	//Add Dist User
	public static void add_Dist_Users(String distUser){
		Actions.pause(2);
		Actions.moveTo(IFSUSERS.addIFSItem, "Move To Dist IFS USers");
		Actions.click(IFSUSERS.addIFSItem, "Dist IFS USers");
		Actions.verifyElement(DistributionGroup.dist_selectUserSearch, "Verify Presence of Distribution User");
		Actions.type(DistributionGroup.dist_selectUserSearch,distUser, "Dist User");
		Actions.pause(1.5);
		Actions.moveTo(DistributionGroup.dist_Search, " Move to Search Dist IFS USers");
		Actions.click_JS(DistributionGroup.dist_Search, " Search Dist IFS USers");
		Actions.pause(2);
		Actions.moveTo(DistributionGroup.dist_checkUser, "Move To Select User");
		Actions.click_JS(DistributionGroup.dist_checkUser, "Select User");
		Actions.pause(1);
		Actions.moveTo(DistributionGroup.dist_AddUser, " Move To Add User");
		Actions.click(DistributionGroup.dist_AddUser, " Add User");
		Actions.pause(1);
		Actions.moveTo(DistributionGroup.dist_Close, " Move To Close User");
		Actions.click(DistributionGroup.dist_Close, " Close User");
		Actions.pause(1);
		Actions.moveTo(DistributionGroup.dist_SaveDistributionGroup, "Move To Save Distribution");
		Actions.click(DistributionGroup.dist_SaveDistributionGroup, "Save Distribution");
	}

	public static void add_ServiceAccounts(String desc){
		Actions.type(ServiceAccounts.serviceAccontDetails,desc,"Description Details");
	}
	//SELECTGROUP FOR RB
	public static void select_Group(String group){
		Actions.pause(1);
		Actions.verifyElement(By.xpath("//div[text()='"+group+"']/../descendant::div[4]/descendant::span"),"Verify Presence of Group");
		Actions.click_JS(By.xpath("//div[text()='"+group+"']/../descendant::div[4]/descendant::span"),"Group select");
	}
	//SEARCH MANAGER And Verify
	public static void searchManager(String managerDetails,String manager,String expectedManagerDetails)
	{
		Actions.click(IFSUSERS.manager, "Click On Manager Details");
		Actions.verifyElement(IFSUSERS.managerDetails, "Verify presence of 'Manage Details' button");
		Actions.type(IFSUSERS.managerDetails,managerDetails,"Manager Details");
		Actions.moveTo(IFSUSERS.searchContainer, "Move OnManager Search Container");
		Actions.click(IFSUSERS.searchContainer, "Click OnManager Search Container");
		Actions.verifyElement(By.xpath("//div[text()='"+manager+"']"), "Verify presence of 'Choose Manage' button");
		Actions.click(By.xpath("//div[text()='"+manager+"']"), "Select Manager"+manager);
		Actions.click(IFSUSERS.closePopUp, "Click On close popup Manager Details");
		Actions.pause(1);
		String val=Actions.getText(IFSUSERS.manager);
		System.out.println(val);
	}


	//SEARCH Alt MANAGER And Verify
	public static void searchAltManager(String managerDetails,String altmanager,String expectedManagerDetails)
	{
		Actions.verifyElementPresent(IFSUSERS.altManager, "Verify presence of 'alt Manager' popup");
		Actions.click(IFSUSERS.altManager, "Click On Manager Details");
		Actions.type(IFSUSERS.managerDetails,managerDetails,"Manager Details");		
		Actions.verifyElement(By.xpath("//div[@id='searchDataGrid']/div[4]/../descendant::div/following-sibling::div[3]/descendant::div[3]/following::div[4]/div[2]"), "Verify presence of 'Manager Details' in popup");
		Actions.click(By.xpath("//div[@id='searchDataGrid']/div[4]/../descendant::div/following-sibling::div[3]/descendant::div[3]/following::div[4]/div[2]"), "Select Manager"+altmanager);
		Actions.click(IFSUSERS.closePopUp, "Click On close popup Manager Details");
		Actions.pause(1);
		String val=Actions.getText(IFSUSERS.altManager); 
		System.out.println(val);
		
	}
	//USER INFORMATION UPDATION
	public static void update_UserInfor(String emailID,String managerDetails,String selectmanager,String altManagerDetails,String expected,String altManager,String expectedAltManager){

		navigateToMenu("User Management");
		searchMailID(IFSUSERS.selectEmailAddressFromProperty, emailID);
		String[] s=emailID.split("@");
		System.out.println(s[0]);
		String user=s[0];
		drillDownUser(user);
		Actions.pause(1);
		searchManager(managerDetails,selectmanager,expected);
		searchAltManager(altManagerDetails,altManager,expected);
		saveIFSITEM();
		Actions.pause(1);
		rbManager();
		rbAltManager();
		saveIFSITEM();
	}

	//USER INFORMATION UPDATION
	public static void update_UserInfor_EmailCheckOut(String emailID){
		navigateToMenu("User Management");
		searchMailID(IFSUSERS.selectEmailAddressFromProperty, emailID);
		HashMap<String, String> testData=Utility.getConfigData();
		String env=testData.get("ENVIRONMENT").toUpperCase();
		System.out.println(env);
		switch(env)
		{

		case "CLOUD":
		{
			Actions.pause(.5);
			String fullNmae=retrieve_FullName();

			drillDownUser(fullNmae);
			break;
		}
		case "OP":
		{
			Actions.pause(.5);
			drillDownUser(emailID);
			break;
		}
		}	
		if(!Actions.isChecked(IFSUSERS.emailOpt))
		{
			System.out.println("in the true condition");
			Actions.moveTo(IFSUSERS.emailOpt,"Move to User is  checked");
			Actions.click_JS(IFSUSERS.emailOpt,"User is  checked");
			saveIFSITEM();
			click_CloseBtn();
		}

		else
		{
			System.out.println("in the false condition");
			Actions.moveTo(IFSUSERS.emailOpt,"Move to User is not checked");
			Actions.click_JS(IFSUSERS.emailOpt,"User is not checked");
			saveIFSITEM();
			click_CloseBtn();
		}

	}
	//UPDATE SECURITY ROLE
	public static void update_SecurityRole(String emailID,String securityRole){

		navigateToMenu("User Management");
		searchMailID(IFSUSERS.selectEmailAddressFromProperty, emailID);
		HashMap<String, String> testData=Utility.getConfigData();
		String env=testData.get("ENVIRONMENT").toUpperCase();
		System.out.println(env);
		switch(env)
		{

		case "CLOUD":
		{
			Actions.pause(.5);
			String fullNmae=retrieve_FullName();

			drillDownUser(fullNmae);
			break;
		}
		case "OP":
		{
			Actions.pause(.5);
			drillDownUser(emailID);
			break;
		}
		}	
		Actions.pause(1.5);
		addSecurity(securityRole);
		checkSecurityRole(securityRole);
		rbSecurityRole();

	}
	//VERIFY TAB ACIVITY

	public static void verify_ActiviytTab(String emailID){

		update_UserInfor_EmailCheckOut(emailID);
		verify_ActivityTab();

	}

	//IMPORT AND EXPOERT USER DETAILS
	public static void importExportUsers(){
		navigateToMenu("User Management");
		HashMap<String, String> testData=Utility.getConfigData();
		String env=testData.get("ENVIRONMENT").toUpperCase();
		System.out.println(env);
		switch(env)
		{

		case "CLOUD":
		{
			Actions.pause(2);
			select_Users();
			import_Users();
			Actions.pause(1);
			Actions.switchToDefaultContent();
			RM_Admin.navigateToMenu("Admin Settings");
			Actions.pause(2);
			Actions.switchToDefaultContent();
			navigateToMenu("User Management");
			Actions.pause(2);
			select_Users();
			export_Users();
			break;
		}
		case "OP":
		{
			Actions.pause(1.5);
			select_Users();
			import_Users();
			Actions.pause(2);
			export_Users();
			break;
		}
		}
	}

	//SERVICEACCOUNTS
	public static void serviceAccounts(String desc){
		navigateToMenu("User Management");
		select_ItemFromManage("Service Accounts");
		add_IFS();
		add_ServiceAccounts(desc);
		saveIFS();
		cancel_ServiceAccounts();

	}


	//SERVICEACCOUNTS
	public static void rb_serviceAccounts(String desc,String user){
		navigateToMenu("User Management");
		select_ItemFromManage("Service Accounts");
		Actions.pause(1.5);
		verify_ServiceAccounts(desc);
		select_ServiceAccounts(user);
		deleteIFS();
	}



	//DISTRIBUTION GROUPS
	public static void addDistGroup(String distName,String distDesc,String user){
		navigateToMenu("User Management");
		select_Item("Groups","Distribution Groups");
		Actions.pause(1);
		add_IFS();
		create_DG(distName,distDesc);
		click_CloseBtn();
		select_DG(distName);
		Actions.pause(1);
		drillDistributionGroup(distName);
		add_Dist_Users(user);
		click_CloseBtn();
		select_ItemFromManage("Users");
		Actions.pause(1.5);
		searchMailID(IFSUSERS.selectEmailAddressFromProperty, user);
		Actions.pause(1.5);
		HashMap<String, String> testData=Utility.getConfigData();
		String env=testData.get("ENVIRONMENT").toUpperCase();
		System.out.println(env);
		switch(env)
		{

		case "CLOUD":
		{
			Actions.pause(.5);
			String fullNmae=retrieve_FullName();
			drillDownUser(fullNmae);
			break;
		}
		case "OP":
		{
			Actions.pause(.5);
			drillDownUser(user);
			break;
		}
		}	
		verify_DistTab(distName);			
		select_Item("Groups","Distribution Groups");
		Actions.pause(4);
		select_MappedUser(distName,user);
		deleteIFS();
	}


	//DISTRIBUTION GROUP
	public static void rb_DG(String group,String user){
		navigateToMenu("User Management");
		select_Item("Groups","Distribution Groups");
		verify_Data(group);
		select_Group(group);
		deleteIFS();
	}

	public static void add_ERPPersonIDS(String user,String erpID,String entity,String logicalID){

		Actions.verifyElement(ERPPersonIDS.search_ERPUser, "Verify presence of 'ERP User' Details");
		Actions.type(ERPPersonIDS.search_ERPUser, user, "Enter ERP User Details");
		Actions.pause(1);
		Actions.moveTo(ERPPersonIDS.erp_SearchUser, "Move To Search User for adding ERP Person");
		Actions.pause(1.5);
		Actions.click_JS(ERPPersonIDS.erp_SearchUser, "Search User for adding ERP Person");
		Actions.pause(1);
		Actions.moveTo(ERPPersonIDS.moveTo_ERPPersonID, "Move To ERP Person IDS");
		Actions.pause(1);
		Actions.click(ERPPersonIDS.moveTo_ERPPersonID, "Focus to ERP Person IDS");
		Actions.type(ERPPersonIDS.enter_ERPPersonID, erpID, "Enter ERP ID Details");
		Actions.click(ERPPersonIDS.moveTo_ERPAccountingEntity, "Focus to ERP Accounting Entity");
		Actions.type(ERPPersonIDS.enter_ERPAccountingEntity, entity, "Enter ERP Accounting Details");
		Actions.click(ERPPersonIDS.moveTo_ERPLogicalID, "Focus to ERP Logiocal IDS");
		Actions.type(ERPPersonIDS.enter_ERPLogicalID, logicalID, "Enter ERP Logcal Details");
		Actions.click(ERPPersonIDS.checkERP, "Check ERP Person IDS");
		Actions.click(ERPPersonIDS.addAndCloseBtn, "Add And Close Button");

	}


	public static void verify_ERPTab(String erp,String entity,String logical){
		Actions.verifyElement(IFSUSERS.erpTab, "Verify presence of 'ERP' Tab");
		Actions.click(IFSUSERS.erpTab, "Click On ERP Tab");
		Actions.pause(1);
		Actions.verify(By.xpath("//div[text()='"+erp+"']"), erp);
		Actions.verify(By.xpath("//div[text()='"+entity+"']"), entity);
		Actions.verify(By.xpath("//div[text()='"+logical+"']"), logical);
	}
	//Create ERP IDS
	public static void create_ERPPersoinIDS(String user,String erpID,String entity,String logicalID,String email){
		navigateToMenu("User Management");
		select_ItemFromManage("ERP Person IDs");
		Actions.pause(1.5);
		add_IFS();
		add_ERPPersonIDS(user,erpID,entity,logicalID);
		saveIFSITEM();
		Actions.pause(.5);
		click_CloseBtn();
	}

	//DELETE ERP PESRON
	public static void delete_ERPPersonIDS(String erpID,String entity,String logicalID){
		navigateToMenu("User Management");
		select_ItemFromManage("ERP Person IDs");
		Actions.pause(1.5);
		verify_Data(erpID);
		verify_Data(entity);
		verify_Data(logicalID);
		Actions.moveTo(IFSUSERS.check_Users, "Move To Check ERP Pesron IDS");
		Actions.click_JS(IFSUSERS.check_Users, "Check ERP Pesron IDS");
		deleteIFS();

	}
	//Verify External Users
	public static void verify_Data(String user){
		Actions.verifyElement(By.xpath("//div[text()='"+user+"']"), user);
	}
	//Add External Users
	public static void add_ExternalUsers(String user1){
		add_IFS();
		Actions.verifyElement(ExternalUsers.save_ExternalUsers, "Verify presence of 'Save External User' button");
		Actions.pause(1);
		Actions.moveTo(ExternalUsers.moveto_externalUser1, "Move to External User1");
		Actions.click_JS(ExternalUsers.moveto_externalUser1, "Move to External User1");
		Actions.pause(1);
		Actions.verifyElement(ExternalUsers.moveto_externalUser1, "Move to External User1");
		Actions.pause(1);
		Actions.click_JS(ExternalUsers.moveto_externalUser1, "Move to External User1");
		Actions.type(ExternalUsers.externaluser1_MailAddress, user1, "Enter External User Details");

	}

	//Add External Users
	public static void add_SecExternalUsers(String user2){
		Actions.pause(1);
		Actions.moveTo(ExternalUsers.addRow, "Move to  add row button");
		Actions.click_JS(ExternalUsers.addRow, "Click on add row button");
		//Actions.click(ExternalUsers.moveto_externalUser2, "Move to External User2");
		Actions.type(ExternalUsers.externaluser2_MailAddress, user2, "Enter External User Details");
		save_ExternalUser();

	}
	public static void save_ExternalUser(){
		Actions.verifyElement(ExternalUsers.save_ExternalUsers, "Verify presence of 'Save External Users' button");
		Actions.click(ExternalUsers.save_ExternalUsers, "Save External User");
	}
	//Create External User
	public static void create_ExternalUsers(String user){
		navigateToMenu("User Management");
		
		select_ItemFromManage("External Users");
		add_ExternalUsers(user);
		save_ExternalUser();


	}
	public static void delete_ExternalUser(){
		Actions.pause(1);
		select_ExternalUser();
		action_btn();
		Actions.verifyElement(ExternalUsers.delete_Btn, "Verify Delete");
		Actions.click(ExternalUsers.delete_Btn, "Click On Delet Button");
		click_YesBtn();

	}

	public static void action_btn(){
		Actions.moveTo(ExternalUsers.action_Btn, "Move To Action Button");
		Actions.click_JS(ExternalUsers.action_Btn, "Click On Action Button");
	}
	//SELECT External User
	public static void select_ExternalUser(){

		Actions.verifyElement(ExternalUsers.select_AllExtUsers, "Verify All External Users");
		Actions.pause(1);

		Actions.moveTo(ExternalUsers.select_AllExtUsers, "Move To Select All External User");
		Actions.click_JS(ExternalUsers.select_AllExtUsers, "Select All External User");
	}

	//Click On Yes Button
	public static void click_YesBtn(){
		if(Actions.verifyElementPresent(IFSUSERS.yesButton, "Verify presence of 'Yes 'Button"))
		{
			Actions.click(IFSUSERS.yesButton, "Click On Yes Button");	
		}
	}
	public static void deactivate_ExternalUser(){

		select_ExternalUser();
		action_btn();
		Actions.click(ExternalUsers.deactivate, "Click On Deactivate");	
		click_YesBtn();

	}
	//
	public static void activateDeactivate_ExternalUser(){
		navigateToMenu("User Management");

		select_ItemFromManage("External Users");
		Actions.pause(1);
		verify_Data("Inactive");
		select_ExternalUser();
		action_btn();
		Actions.verifyElement(ExternalUsers.activate, " Verify presence of 'Activate' button");
		Actions.click(ExternalUsers.activate, "Click on Activate button");
		click_YesBtn();
		verify_Data("Active");
		Actions.switchToDefaultContent();
		RM_Admin.navigateToMenu("Admin Settings");
		Actions.pause(2);
		Actions.switchToDefaultContent();
		navigateToMenu("User Management");
		select_ItemFromManage("External Users");
		delete_ExternalUser();
	}
	//DELETE EXTERNAL USER

	public static void rb_ExternalUser(String user){
		navigateToMenu("User Management");
		select_ItemFromManage("External Users");
		verify_Data(user);
		Actions.pause(1);
		delete_ExternalUser();
	}

	//Create Multiple External user
	public static void create_MultipleExtUser(String user1,String user2){
		navigateToMenu("User Management");
		select_ItemFromManage("External Users");
		add_ExternalUsers(user1);
		add_SecExternalUsers(user2);
		verify_Data(user2);
		verify_Data(user1);
	}

	//Create Multiple External user
	public static void deactivate_MultipleExternalUser(String user1,String user2)
	{   
		create_MultipleExtUser(user1,user2);
		verify_Data(user1);
		verify_Data(user2);
		Actions.pause(1);
		select_ExternalUser();
		Actions.pause(1);
		Actions.click(ExternalUsers.deactivate_All, "deactivate multiple by selecting all");
		click_YesBtn();
		verify_Data("Inactive");

	}

	//Delete Activate Multiple users
	public static void delete_ActMultipleUsers(String user1,String user2)
	{
		create_MultipleExtUser(user1,user2);
		verify_Data("Active");
	}

	//create single contact
	public static void create_SingleContact(String fullname,String email,String contactid)
	{
		navigateToMenu("User Management");
		select_ItemFromManage("Contacts");
		Actions.pause(1);
		add_IFS();
		add_Singlecontact(fullname,email,contactid);
		saveContacts();


	}
	// save contacts
	public static void saveContacts()
	{
		Actions.click(Contacts.save_Contacts, "save to contacts");
	}

	//Add single contact
	public static void add_Singlecontact(String fullname,String email,String contactid)
	{
		Actions.verifyElement(Contacts.moveTo_fullname, "Verify presence of 'Full Name' button");
		Actions.pause(1);
		Actions.click(Contacts.moveTo_fullname, "click on Full name");
		Actions.type(Contacts.enter_FullName, fullname, "Enter full name");
		Actions.click(Contacts.moveTo_EmailAddress, "click on Emaill address");
		Actions.type(Contacts.enter_EmailAddress, email, "Enter full name");
		Actions.click(Contacts.moveTo_ContactID, "click on Contact ID");
		Actions.type(Contacts.enter_ContactID, contactid, "Enter Contact ID");
	}

	//Add second contact 
	public static void add_SecContact(String fullname1,String email1,String contactid1)
	{
		Actions.pause(2);
		Actions.click(Contacts.addContacts,"Click on add contact button ");
		Actions.pause(1);
		//Actions.click(Contacts.moveTo_fullname1, "click to add second full name");
		Actions.type(Contacts.enter_FullName1, fullname1, "Enter full name");
		Actions.click(Contacts.moveTo_EmailAddress1, "click on Emaill address");
		Actions.type(Contacts.enter_EmailAddress1, email1, "Enter full name");
		Actions.click(Contacts.moveTo_ContactID1, "click on Contact ID");
		Actions.type(Contacts.enter_ContactID1, contactid1, "Enter Contact ID");

	}

	//Create multiple contacts
	public static void create_MultipleContacts(String fullname,String email,String contactID,String fullname1,String email1,String contactID1)
	{
		navigateToMenu("User Management");
		select_ItemFromManage("Contacts");
		add_IFS();
		Actions.pause(1);
		add_Singlecontact(fullname,email,contactID);
		add_SecContact(fullname1,email1,contactID1);
		saveContacts();
			}

	//select contacts
	public static void select_Contacts()
	{
		Actions.pause(1.5);
		Actions.moveTo(Contacts.select_AllContacts, "Move to select all contacts");	
		Actions.click_JS(Contacts.select_AllContacts, "select all contacts");	
	}

	//delete contacts 
	public static void delete_Contacts()
	{
		select_Contacts();
		deleteIFS();
	}

	//Roll back saved contacts
	public static void rb_Contacts(String fullname,String email,String contactid)
	{
		navigateToMenu("User Management");
		select_ItemFromManage("Contacts");
		verify_Data(fullname);
		verify_Data(email);
		//verify_Data(contactid);
		Actions.pause(1);
		delete_Contacts();
	}
	public static void rb_AddContactstoGrp(String fullname,String email,String contactid,String grpname)
	{
		navigateToMenu("User Management");
		select_ItemFromManage("Contacts");
		Actions.pause(1);
		verify_Data(fullname);
		verify_Data(email);
		verify_Data(contactid);
		verify_Data(grpname);
		delete_Contacts();
		Actions.switchToDefaultContent();
		RM_Admin.navigateToMenu("Admin Settings");
		Actions.pause(2);
		Actions.switchToDefaultContent();
		navigateToMenu("User Management");
		select_Item("Groups","Contact Groups");
		Actions.pause(1);
		select_AllContactgrps();
		Actions.pause(1);
		deleteIFS();

	}
	//Add contact Groups

	public static void create_ContactGroups(String grpname,String description)
	{
		navigateToMenu("User Management");
		select_Item("Groups","Contact Groups");
		add_IFS();
		Actions.verifyElement(Contacts.enter_ContactGroupName, "Verify presence of 'Group Name' ");
		Actions.type(Contacts.enter_ContactGroupName,grpname,"Enter group name");
		Actions.type(Contacts.enter_contactDescription, description,"Enter  contact group description");
		Actions.click_JS(Contacts.save_DistGrp, "Save contact group");
		click_CloseBtn();

	}



	//select contact group
	public static void select_ContactGrp(String contactGrpName)
	{
		By by=By.xpath("//div[text()='"+contactGrpName+"']/../descendant::span");
		Actions.pause(1);
		Actions.tab();
		//Actions.click(Contacts.contactGroup, "double click create contact group");
		Actions.pause(1);
		Actions.click_JS(Contacts.choose_ContactGroup, "click create contact group");
		//Actions.dblClick(Contacts.contactGroup, "double click create contact group");
		Actions.pause(1);
		Actions.click(by, "select contact group from check box "+contactGrpName);
		Actions.pause(0.5);
		Actions.click(Contacts.close_ContactGrpSelection, "close contact group selection dropdown");
	}

	



	//select all contact groups
	public static void select_AllContactgrps()
	{
		Actions.verifyElement(Contacts.select_AllContactGrps, "Verify presence of 'Select all Contacts' button");
		Actions.pause(1);
		Actions.moveTo(Contacts.select_AllContactGrps, "select all contact groups");
		Actions.click_JS(Contacts.select_AllContactGrps, "select all contact groups");
	}


	//Delete contact Groups
	public static void delete_ContactGroups(String grpname,String description)
	{   
		navigateToMenu("User Management");
		select_Item("Groups","Contact Groups");
		Actions.pause(1);
		verify_Data(grpname);
		verify_Data(description);
		select_AllContactgrps();
		Actions.pause(1);
		deleteIFS();
	}

	//Add Contacts To ContactGroup
	


	//Select CONFIGURE

	public static void select_ItemFromConfigure(String menuItem)
	{
		navigateToMenu("User Management");
		Actions.verifyElement(IFSUSERS.configure, "Verify presence of 'Configure' Tab");
		Actions.moveTo(IFSUSERS.configure,"Move On configure");
		Actions.click_JS(IFSUSERS.configure,"Click On configure");
		Actions.verifyElement(By.xpath("//a[text()='"+menuItem+"']"), "Verify presence of 'Menu Item' Tab"+menuItem);
		Actions.click(By.xpath("//a[text()='"+menuItem+"']"), "Click on Menu "+menuItem);
	}

	//Navigate to Document Authorizations.

	public static void navigate_DocAuth()
	{
		select_ItemFromConfigure("Document Authorizations");
	}

	//Add role to dataAdministrator 
	public static void accountingChart_AddRole(String role)
	{
		navigate_DocAuth();
		Actions.verifyElement(DocumentAuthorizations.accountingChart, "Verify presence of 'Account Charting' button");
		Actions.click(DocumentAuthorizations.accountingChart, "click on AccountingChart");
		Actions.pause(2);
		add_IFS();
		Actions.pause(1);
		Actions.click(By.xpath("//div[text()='"+role+"']/parent::div/div[2]"), "Add data administrator");
		Actions.click(DocumentAuthorizations.add_Btn, "Click add buton");
		saveIFS();
		Actions.pause(.5);
		verify_Data("1");
	}


	//Verify mapped roles
	public static void verify_MappedRoles(String doctypes,String expected)
	{
		Actions.verifyElementPresent(By.xpath("//div[text()='"+doctypes+"']/parent::div/div[4]"), "verify presence of data  in mapped roles");
		String actual=Actions.getText(By.xpath("//div[text()='"+doctypes+"']/parent::div/div[4]"));
		Actions.verifyString(actual,expected);

	}


	//Add multiple roles to dataAdministrator 
	public static void accountingChart_AddMultipleRoles(String role1,String role2)
	{
		navigate_DocAuth();
		Actions.click(DocumentAuthorizations.accountingChart, "click on AccountingChart");
		Actions.pause(1.5);
		add_IFS();
		Actions.click(By.xpath("//div[text()='"+role1+"']/parent::div/div[2]"), "Add data administrator");
		Actions.click(By.xpath("//div[text()='"+role2+"']/parent::div/div[2]"), "Add data administrator");
		Actions.click(DocumentAuthorizations.add_Btn, "Click add buton");
		saveIFS();
		click_CloseBtn();
		verify_Data("2");
	}

	//delete security roles
	public static void delete_SecurityRoles()
	{
		Actions.click(DocumentAuthorizations.select_AllSecurityRoles, "select all security roles");
		Actions.click(DocumentAuthorizations.delete_Roles, "delete security roles");
		saveIFS();
	}


	//Roll back role for dataAdministrator
	public static void rb_accountingChart_AddRole()
	{
		navigate_DocAuth();
		Actions.verifyElement(DocumentAuthorizations.accountingChart, "Verify presence of 'Accounting Chart' button");
		Actions.click(DocumentAuthorizations.accountingChart, "click on AccountingChart");
		delete_SecurityRoles();
	}

	//Click On Close Button
	public static void click_CloseBtn(){
		if(Actions.verifyElementPresent(By.xpath("//div[@class='popupMiddleCenterInner content']/descendant::div[@title='Close']"), "Verify presence of 'Close' button"))
		{
			Actions.pause(.5);
			Actions.click_JS(By.xpath("//div[@class='popupMiddleCenterInner content']/descendant::div[@title='Close']"), "Click On Close Button");	
		}
	} 
	//Save contact group button

	public static void save_ContactGrp()
	{
		Actions.pause(1);
		Actions.moveTo(Contacts.save_DistGrp, "Move to Save contact group");
		Actions.click_JS(Contacts.save_DistGrp, "Save contact group");
	} 
	public static void add_ContactGroups(String grpname,String description){
		add_IFS();
		Actions.verifyElement(Contacts.enter_ContactGroupName,"Enter group name");
		Actions.type(Contacts.enter_ContactGroupName,grpname,"Enter group name");
		Actions.type(Contacts.enter_contactDescription, description,"Enter  contact group description");
		Actions.pause(1.5);
		save_ContactGrp();
		Actions.pause(1);
		verify_Data(grpname);
		verify_Data(description);
	} 
	//Add multiple contact groups

	public static void createMultipleContactGroups(String grpname,String description,String grpname1,String description1)
	{
		navigateToMenu("User Management");
		select_Item("Groups","Contact Groups");
		add_ContactGroups(grpname,description);
		click_CloseBtn();
		add_ContactGroups(grpname1,description1);
		click_CloseBtn();
	}



	//Create Contact Group And AssignContacts

	public static void create_ContactGrpAssignContacts(String grpname,String description,String fullname,String email,String contactid)
	{   
		create_SingleContact(fullname,email,contactid);
		click_CloseBtn();
		select_Item("Groups","Contact Groups");
		Actions.pause(1.5);
		add_ContactGroups(grpname,description);
		click_CloseBtn();
		/*select_Item("Groups","Contact Groups");
		Actions.pause(2);
		Actions.verifyElement(By.xpath("//div[text()='"+grpname+"']/../descendant::div[5]/a"), "Verify presence of add contacts to group");
		Actions.pause(1);
		Actions.moveTo(By.xpath("//div[text()='"+grpname+"']/../descendant::div[5]/a"), "Move To add contacts to group");
		Actions.pause(3);*/
		Actions.pause(1.5);
		/*Actions.switchToDefaultContent();
		RM_Admin.navigateToMenu("Admin Settings");
		Actions.pause(2);
		Actions.switchToDefaultContent();
		navigateToMenu("User Management");
		select_Item("Groups","Contact Groups");*/
		Actions.pause(5);
		WebElement elementToClick = Utility.getDriver().findElement(By.xpath("//div[text()='"+grpname+"']/../descendant::a/span"));
		 
		 
		 
		// Scroll the browser to the element's Y position
		 
		((JavascriptExecutor)Utility.getDriver()).executeScript("window.scrollTo(0,"+elementToClick.getLocation().y+")");
		 
		 
		 
		// Click the element
		 
		elementToClick.click();
		//Actions.click_JSLocation(By.xpath("//div[text()='"+grpname+"']/../descendant::a/span"));
		//Actions.click(By.xpath("//div[text()='"+grpname+"']/../descendant::a/span"), "Click add contacts to group");
		Actions.pause(1);
		add_IFS();
		Actions.pause(2);
		Actions.verifyElement(DistributionGroup.dist_AssignContactsToGrp, " Verify presence of 'Assign Contatct Groups' ");
		Actions.moveTo(DistributionGroup.dist_AssignContactsToGrp, "Move To assaign contacts to group");
		Actions.click_JS(DistributionGroup.dist_AssignContactsToGrp, "click assaign contacts to group");
		Actions.click(DistributionGroup.dist_AddandCloseBtn, "click add and close button");
		verify_Data(fullname);
		verify_Data(email);
		Actions.click(Contacts.save_ContactGrp, "Save contact group");
		String actual=Actions.getText(By.xpath("//div[text()='"+grpname+"']/following::div[2]")); 
		Actions.verifyString(actual,"1");
		verify_deleteAssignedContact();
	}

	//delete assigned contact in distribution group
	public static void verify_deleteAssignedContact()
	{
		select_AllContactgrps();
		Actions.click(IFSUSERS.deleteIFSItem, "Delete IFS Item");
		String warning=Actions.getText(By.xpath("//div[@class='detailedMessage']"));
		verify_Data(warning);
		Actions.click(By.xpath("//button[text()='OK']"), "click ok button");
	}


	//Rollback create Contact Group And AssignContacts

	public static void rb_ContactGrpAssignContacts(String grpname,String fullName,String email,String contactID)
	{
		rb_Contacts(fullName,email,contactID);
		Actions.switchToDefaultContent();
		RM_Admin.navigateToMenu("Admin Settings");
		Actions.pause(2);
		Actions.switchToDefaultContent();
		navigateToMenu("User Management");
		select_Item("Groups","Contact Groups");
		Actions.pause(1.5);
		select_AllContactgrps();
		deleteIFS();

	}

	//Activate Deactivated Multiple Users
	public static void activateDeactivatedMultiUsers(String user1,String user2)
	{
		deactivate_MultipleExternalUser(user1,user2);
		Actions.pause(1);
		Actions.click(ExternalUsers.activate_All, "deactivate multiple by selecting all");
		click_YesBtn();


	}
	//Add Contacts To ContactGroup
    public static void addcontacts_ToContactGrps(String grpname,String desc,String fullname,String email,String contactid)
           {
                  create_ContactGroups(grpname,desc);
                  Actions.pause(.5);
                  select_ItemFromManage("Contacts");
                  add_IFS();
                  add_Singlecontact(fullname, email, contactid);
                  select_ContactGrp(grpname);
                  saveContacts();
           }




	//Reteieve Full Name
	public static String retrieve_FullName(){
		Actions.verifyElement(By.xpath("//span[text()='Full Name']/following::div[14]/following::div/descendant::div[25]"),"Verify Presence of Full Name");
		String actual=Actions.getText(By.xpath("//span[text()='Full Name']/following::div[14]/following::div/descendant::div[25]"));
		return actual; 
	}

}

