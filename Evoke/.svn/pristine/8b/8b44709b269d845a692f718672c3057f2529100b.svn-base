package scripts.ShellHeader;

import org.apache.commons.lang3.RandomStringUtils;
import org.testng.annotations.AfterClass;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import actions.Actions;
import objRepository.Global;
import objRepository.Social.ActivityFeed;
import objRepository.Social.ShellHeaderShareOverlay;
import reusableMethods.RM_Social;
import utility.Utility;


public class Ts_SharePostToTaggedGroup_13236 {
	
	private Utility utl;
	//ExtentTest logger;

	static boolean rerun=false;	
	public static String className;
	@BeforeClass
	public void setUp()
	{
		utl=new Utility();
		utl.initTest(this.getClass().getName().substring(this.getClass().getName().lastIndexOf(".")+1).trim());
		className=this.getClass().getName().toString();
		new Actions();
	}
		@AfterMethod
		public void logOutAndBrowserClose()
		{
			Actions.logOutAndBrowserCloseMU();
		}
		@AfterClass
		public void endReport() 
		{
			if(rerun)
			{
				Utility.addClass(className);
			}
			Actions.endScriptReportMU();
			
			
		}
		String time=RandomStringUtils.randomNumeric(4);
		private String groupName=Utility.getTestData().get("GROUP_NAME")+time;
		@Test
		public void createGroup(){
			try {
				Global.login(Utility.getConfigData().get("USER26"), Utility.getConfigData().get("PASSWORD"));
				//Actions.pause(3);
				RM_Social.createGroup(groupName);
				//Actions.pause(3);
				RM_Social.inviteToGroup(Utility.getTestData().get("FULLNAME_USER16"));
			} catch (Exception e) {
				rerun=true;
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
		}
		@Test(dependsOnMethods={"createGroup"})
		public void acceptGroupInviteRequest()
		{
			try {
				Global.login(Utility.getConfigData().get("USER16"), Utility.getConfigData().get("PASSWORD"));
				//Actions.pause(3);
				//RM_Social.acceptConnectionRequest();
				RM_Social.acceptConnectionRequest(groupName);
			} catch (Exception e) {
				rerun=true;
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
		}
		@Test(dependsOnMethods={"acceptGroupInviteRequest"})
		public void postMessage()
		{
			try {
				Global.login(Utility.getConfigData().get("USER26"), Utility.getConfigData().get("PASSWORD"));
				Actions.pause(3);
				RM_Social.openShellHeaderShareOverlay();
				//Actions.switchtoFrame(Global.mingleCLFrame, "Switch to Mingle Frame");
				Actions.click(ShellHeaderShareOverlay.privacyLink, "Open Privacy List");
				RM_Social.selectPrivacyInShellHeaderShareOverlay(Utility.getTestData().get("PRIVACY_TAGGEDUSERSANDGROUPS"));
				Actions.click(ShellHeaderShareOverlay.textArea, "Click On Text Area");
				Actions.clearText(ShellHeaderShareOverlay.textArea, "Clear Text in Text Area");
				RM_Social.tagUserInShellHeaderShareOverlay(groupName);
				RM_Social.typeMessageInShellHeaderShareOverlay(Utility.getTestData().get("POSTMSG")+time);
				RM_Social.clickOnShareBtn();
				Actions.switchToDefaultContent();
				RM_Social.navigateToActivityPage();
				//Actions.switchtoFrame(Global.socialCLFrame, "Switch to Social Frame");
				//Actions.verify(ActivityFeed.msgContainer, groupName+" "+Utility.getTestData().get("POSTMSG")+time);
				RM_Social.verifyMessage(Utility.getTestData().get("POSTMSG")+time,groupName);
			} catch (Exception e) {
				rerun=true;
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		@Test(dependsOnMethods={"postMessage"})
		public void verifyMessage()
		{
			
				
			try {
				Global.login(Utility.getConfigData().get("USER16"), Utility.getConfigData().get("PASSWORD"));
				RM_Social.navigateToActivityPage();
				Actions.pause(2);
				//Actions.verify(ActivityFeed.msgContainer, groupName+" "+Utility.getTestData().get("POSTMSG")+time);
				RM_Social.verifyMessage(Utility.getTestData().get("POSTMSG")+time,groupName);
			} catch (Exception e) {
				Utility.addClass(className);
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		
		}
		
	

}
