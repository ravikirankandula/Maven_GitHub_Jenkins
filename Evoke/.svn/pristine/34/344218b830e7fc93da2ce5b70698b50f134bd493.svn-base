/**
 * 
 */
package utility;

import java.awt.Robot;
import java.awt.Toolkit;
import java.awt.datatransfer.StringSelection;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Properties;
import java.util.Set;
import java.util.concurrent.TimeUnit;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;

import javax.activation.DataHandler;
import javax.activation.DataSource;
import javax.activation.FileDataSource;
import javax.mail.BodyPart;
import javax.mail.Message;
import javax.mail.Multipart;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;

import org.apache.commons.io.FileUtils;
import org.openqa.selenium.By;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.ie.InternetExplorerDriver;
import org.openqa.selenium.remote.CapabilityType;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.testng.annotations.AfterSuite;
import org.testng.annotations.BeforeSuite;
import org.testng.annotations.BeforeTest;
import org.testng.annotations.Test;

import com.assertthat.selenium_shutterbug.core.Shutterbug;
import com.assertthat.selenium_shutterbug.utils.web.ScrollStrategy;
import com.relevantcodes.extentreports.ExtentReports;
import com.relevantcodes.extentreports.ExtentTest;
import com.relevantcodes.extentreports.LogStatus;

import actions.Actions;
import objRepository.Global;


public class Utility {
	public final static String RpPath=System.getProperty("user.dir");
	 private static WebDriver driver;
	private static Utility utl;
	static String version = null;
	//Used to make the value in driver=null after every Class.
	 protected static void setDriver(WebDriver driver) {
		Utility.driver = driver;
		
	}





	public static String browser1, browser=null;
	public static String mingleBatchCountFileName="MingleBatchCount.properties";
	 
	 public static  ExtentReports report=null;
	 public static ExtentTest logger,logger2;
	 private static final String batchCount=System.getProperty("count");
	 private static String batchCountPath="c:\\MingleBatchCount\\";
	@BeforeSuite
		public void startReport()
		{
		
			Utility.initReport();
			createXmlBasicStructure();
			
			try{
				new File(batchCountPath).mkdir();
				Utility.createFile(batchCountPath+mingleBatchCountFileName);
				Utility.writeToFile(batchCountPath+mingleBatchCountFileName,Integer.parseInt(batchCount));
				 Utility.zipSrc=RpPath+"\\logs\\"+Utility.date+"\\"+Utility.time_milli;
		         // Destination for Zip file
		         Utility.zipDst=RpPath+"\\"+Utility.suite+".zip";
		         deleteZip();
			}catch(Exception e)
			{
				e.printStackTrace();
			}
			
			
		}
		@AfterSuite
		public void endReport()  
		{
			try{
				Utility.closeReport();
			}catch (Exception e) {
				
			}
			Utility.setMingleBatchCount();
			if(Utility.getMingleBatchCount()==0)
			{
				System.out.println("!!!!!!!!!!!!!!!!!!!!!!!!! Sending Email....................................");
			//	sendConsolidatedMail();
			}
			
			try {
				
					
					
					Utility.zipReport(Utility.zipSrc,Utility.zipDst);
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			
				Utility.execute(RpPath+Utility.suite+".zip");
		
		
		}
	 
	 /*
	  * 
	  * Code to Read Browser Name from TestNG.xml(Suite) file
	  * 
	  * 
	  * @param browser
	  * @throws Exception
	  */
		@Test
		public void test1()
		{
			System.out.println("123");
		}
		
	 @BeforeTest
		//@Parameters("Browser")
		public void setUpBrowser() 
		{
			Utility.browser=System.getProperty("browser");

			//Utility.browser="chrome";		

		// Utility.browser="chrome";

			//Utility.report.endTest(logger2);
			//Actions.driverClose();
			//Utility.report.flush();
			System.out.println("Suite File Name is : "+System.getProperty("suite").split("\\.")[0]);
			System.out.println("Browser is : "+System.getProperty("browser"));
			System.out.println("ENV is : "+System.getProperty("environment"));
			System.out.println("Batch Count is : "+System.getProperty("count"));
			
			
			
		}
	 // Read Batch Count from Properties File................
	 
	  private static int getMingleBatchCount()
	 {		  Properties prop = new Properties();
			InputStream input = null;
			int count = -1;
			try {

				input =new FileInputStream(batchCountPath+mingleBatchCountFileName);

				// load a properties file
				prop.load(input);
				// get the property value and print it out
				count=Integer.parseInt(prop.getProperty("MINGLE_BATCH_COUNT"));
				System.out.println("Remaining Batches Count : "+count);
				
				
			} catch (IOException ex) {
				ex.printStackTrace();
			} finally {
				if (input != null) {
					try {
						input.close();
					} catch (IOException e) {
						e.printStackTrace();
					}
				}
			}
			return count;
	 }
	// Write Batch Count to Properties File................
	  private static void setMingleBatchCount()
	  {
		//####################### Properties Write#############################
			Properties prop = new Properties();
			OutputStream output = null;

			try {
				File f=new File(batchCountPath+mingleBatchCountFileName);

				output = new FileOutputStream(f,true);

				// set the properties value
				int v=Utility.getMingleBatchCount()-1;
				prop.setProperty("MINGLE_BATCH_COUNT",Integer.toString(v));
			    // save properties to project root folder
				prop.store(output, null);
				//System.out.println("After Update :"+Utility.getMingleBatchCount());

			} catch (IOException io) {
				io.printStackTrace();
			} finally {
				if (output != null) {
					try {
						output.close();
					} catch (IOException e) {
						e.printStackTrace();
					}
				}

			}
	  }
	  
	
	 
	 /*
	  * 
	  * Code to create browser instance.
	  * 
	  * 
	  * 
	  * @return
	  */
		public static WebDriver getDriver()
		{
			if(driver==null){
				Actions.logger.log(LogStatus.INFO, "Browser is going to be launch : ");
				Actions.log4j.info("Browser is going to be launch : ");
			if(browser==null || browser.equalsIgnoreCase("chrome"))
			{	
				
				System.setProperty("webdriver.chrome.driver",".\\lib\\chromedriver.exe");
				/*ChromeOptions chromeOptions = new ChromeOptions();
				chromeOptions.addArguments("--start-maximized");*/
				String downloadFilepath =RpPath+"\\Downloads";
				 HashMap<String, Object> chromePrefs = new HashMap<String, Object>();
			        chromePrefs.put("profile.default_content_settings.popups", 0);
			        chromePrefs.put("download.default_directory", downloadFilepath);
			        chromePrefs.put("safebrowsing.enabled", "true"); 
			        
			        ChromeOptions options = new ChromeOptions();
			        options.addArguments("--allow-running-insecure-content");
			        options.setExperimentalOption("prefs", chromePrefs);
			        DesiredCapabilities cap = DesiredCapabilities.chrome();
			        cap.setCapability(CapabilityType.ACCEPT_SSL_CERTS, true);
			        cap.setCapability(ChromeOptions.CAPABILITY, options);
				driver=new ChromeDriver(cap); 
				
				//driver=new ChromeDriver(); 
				Utility.browser1="Chrome";
			}
			else if(browser.equalsIgnoreCase("ie"))
			{	
				DesiredCapabilities capabilities = DesiredCapabilities.internetExplorer();
			  //  capabilities.setCapability(InternetExplorerDriver.INTRODUCE_FLAKINESS_BY_IGNORING_SECURITY_DOMAINS, true);
			 capabilities.setCapability("requireWindowFocus", false);
				capabilities.setCapability("nativeEvents", false);    
				//capabilities.setCapability("unexpectedAlertBehaviour", "accept");
				//capabilities.setCapability("ignoreProtectedModeSettings", true);
				//capabilities.setCapability("disable-popup-blocking", true);
				capabilities.setCapability("enablePersistentHover", true);
				capabilities.setCapability(CapabilityType.ACCEPT_SSL_CERTS, true);  
				System.setProperty("webdriver.ie.driver",".\\lib\\IEDriverServer.exe");
				
				//System.setProperty("webdriver.ie.driver","C:\\Users\\lkanthu\\Downloads\\Windows7-KB2990999-x64.msu");
				driver=new InternetExplorerDriver(capabilities);
				Utility.browser1="Internet Explorer";
			}
			else if(browser.equalsIgnoreCase("firefox"))
			{
				Utility.browser1="Firefox";
				driver=new FirefoxDriver();
			}
			else
			{
				Utility.browser1="Chrome";
				System.setProperty("webdriver.chrome.driver",".\\lib\\chromedriver.exe");
				/*ChromeOptions chromeOptions = new ChromeOptions();
				chromeOptions.addArguments("--start-maximized");
				driver=new ChromeDriver(chromeOptions); */
				driver=new ChromeDriver(); 
				
			}
			 HashMap<String, String> testData=Utility.getConfigData();
				
				//TESTDATA
				 String url=testData.get("URL");
				 System.out.println("URL IS : "+url);
			driver.get(url);
			driver.manage().window().maximize();
			Actions.log4j.info("Browser is launched in : \""+Utility.browser1+"\" Browser And URL : "+url);
			Actions.logger.log(LogStatus.INFO, "Browser launched in : "+Utility.browser1);
			Actions.logger.log(LogStatus.INFO, "Launched url is : "+url);
			

			//driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
			
			return driver;
			}
			return driver;
		}
		
		/*
		 * 
		 * Code to Capture Screen shot
		 */
		public static String getScreenshot()
		{
			DateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy_HH_mm_ss");
			Date date = new Date();
			
			String df=dateFormat.format(date);
		String path=RpPath+"/logs/"+Utility.date+"/"+Utility.time_milli+"/screens/error"+df+".png";
		
	
		//File dir = new File("./logs/"+time+"/screens");
		//dir.mkdir();
		String path2=RpPath+"/screens/error"+df+".png";
			File src= ((TakesScreenshot)driver). getScreenshotAs(OutputType.FILE);
		//Shutterbug.shootPage(driver).save(path);
			try 
			{
				//Shutterbug.shootPage(driver, ScrollStrategy.BOTH_DIRECTIONS).save();
				FileUtils.copyFile(src, new File(path));
			}
			catch(Exception e)
			{
			e.printStackTrace();
			}
			return path;
		}
		
		/*
		 * 
		 * Code to create results in report
		 */
		public static String appendScreenshot()
		{
			
				String path=getScreenshot();
				return logger.addScreenCapture(path);
				//test.log(LogStatus.FAIL, "Verification Failed");
				
		    
		
		}
	
	
	
		public  ExtentTest initTest(String name)
		{
			
			report.loadConfig(new File(RpPath+"\\extent-config.xml"));
			return logger=report.startTest(name);
			
		}
		public static String time=Utility.getTime();
		public static String date;
		public static String time_milli;
		public static String getTime()
		{
			Date now = new Date();
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("dd-MM-yyyy_HH_mm");
			Utility.date=new SimpleDateFormat("dd-MM-yyyy").format(now);
			Utility.time_milli=new SimpleDateFormat("dd-MM-yyyy_HH_mm_ss_SS").format(now);
			System.out.println("MILI Seconds%%%%%%%%%%%%%%%%%%%: "+Utility.time_milli);
			return dateFormat1.format(now);
		}
		
		private static String projectName;
		private static String MongoDbServerIP="10.39.99.97";
		private static String suite;
		public static  void initReport()
		{
			Utility.suite=System.getProperty("suite").split("\\.")[0];
			
			//report=new ExtentReports(RpPath+"\\logs\\"+time+"\\"+Utility.suite+".html",false);
			report=new ExtentReports(RpPath+"\\logs\\"+Utility.date+"\\"+Utility.time_milli+"\\"+Utility.suite+".html",false);
			/*Utility.projectName="Mingle_Cloud "+date;
			report.assignProject(projectName);
			report.x(MongoDbServerIP, 27017);*/
		}
		public static void closeReport()
		{
			
			report.flush();
			 
			
				
				//report.close();
			
		}
	
	
	
	
	
	/*
	 * 
	 * Code to read values from Properties(Config.properties, TestDate.properties) File
	 */
	
	public static String getValuesFromPropertiesFile(String propertiesFileName, String key) {
		try
		{			
			FileInputStream fis = new FileInputStream(new File(RpPath+"\\"+propertiesFileName+".properties"));    			
			Properties prop=new Properties();
			prop.load(fis);
			return prop.get(key).toString();
		}
		catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}
	
	
	
	 
		 
		 public static HashMap<String, String> getTestData() {
		 Properties prop = new Properties();
		 HashMap<String, String> propvals = new HashMap<String, String>();
		 try {
		 
		/* input = Utility.class
		 .getResourceAsStream(RpPath+"testdata.properties");*/
			 FileInputStream fis = new FileInputStream(new File(RpPath+"\\testdata.properties"));   
		 prop.load(fis);
		 Set<String> propertyNames = prop.stringPropertyNames();
		 for (String Property : propertyNames) {
		 propvals.put(Property, prop.getProperty(Property));
		 }
		 } catch (FileNotFoundException e) {
		 e.printStackTrace();
		 } catch (IOException e) {
		 e.printStackTrace();
		 } catch (Exception e) {
		 e.printStackTrace();
		 }
		return propvals;
		 }
	
		 public static HashMap<String, String> getConfigData() {
			 Properties prop = new Properties();
			 HashMap<String, String> propvals = new HashMap<String, String>();
			 try {
			 
			/* input = Utility.class
			 .getResourceAsStream(RpPath+"testdata.properties");*/
				 FileInputStream fis = new FileInputStream(new File(RpPath+"\\config.properties"));   
			 prop.load(fis);
			 Set<String> propertyNames = prop.stringPropertyNames();
			 for (String Property : propertyNames) {
			 propvals.put(Property, prop.getProperty(Property));
			 }
			 } catch (FileNotFoundException e) {
			 e.printStackTrace();
			 } catch (IOException e) {
			 e.printStackTrace();
			 } catch (Exception e) {
			 e.printStackTrace();
			 }
			return propvals;
			 }
		 
		 public static String report() throws IOException{
			 
			 Utility.getDriver().get(RpPath+"\\logs\\extent.html");
			 Utility.getDriver().findElement(Global.dashBorad).click();
			   File scrFile = ((TakesScreenshot)Utility.getDriver()). getScreenshotAs(OutputType.FILE);
			   //The below method will save the screen shot in d drive with name "screenshot.png"
			   String file=RpPath+"\\logs\\screenshot.png";
			      FileUtils.copyFile(scrFile, new File(RpPath+"\\logs\\screenshot.png"));
			      Utility.getDriver().close();
			return file;
		 }
	
		 //private static String zipSrc=RpPath+"\\logs\\"+time;
		 private static String zipSrc;//=RpPath+"\\logs\\"+Utility.date+"\\"+Utility.time_milli;
         // Destination for Zip file
         private static String zipDst;//=RpPath+"\\"+Utility.suite+".zip";
         
         public static void zipReport(String sourceDirPath, String zipFilePath) throws IOException {
        	 
              Path p = Files.createFile(Paths.get(zipFilePath));

              ZipOutputStream zs = new ZipOutputStream(Files.newOutputStream(p));
              try {
                  Path pp = Paths.get(sourceDirPath);
                  Files.walk(pp)
                    .filter(path -> !Files.isDirectory(path))
                    .forEach(path -> {
                        String sp = path.toAbsolutePath().toString().replace(pp.toAbsolutePath().toString(), "").replace(path.getFileName().toString(), "");
                        ZipEntry zipEntry = new ZipEntry(sp + "/" + path.getFileName().toString());
                        try {
                            zs.putNextEntry(zipEntry);
                            zs.write(Files.readAllBytes(path));
                            zs.closeEntry();
                      } catch (Exception e) {
                          System.err.println(e);
                      }
                    });
              } finally {
                  zs.close();
              }
          }
         public static void deleteZip()
         {
        	File f=new File(zipDst);
        	f.delete();
        	Actions.log4j.info("Existing Zip File is Deleted");
        	//Actions.logger.log(LogStatus.INFO, "Existing Zip File is Deleted");
        	
        	
        	 
         }



		 
		

	        	  
	        	  public static void execute(String reportFileName)  {
	        		//  String to = "lavanya.kanthu@infor.com,suresh.nagineni@infor.com,ranjitha.anumukonda@infor.com";
	        		  //greg.smart@infor.com,narahari.ankam@infor.com
	        			HashMap<String, String> configData=Utility.getConfigData();
	        		    // Sender's email ID needs to be mentioned
	        		    String from ="mingleqaauto@infor.com";
	      	  /*      final String username = "lavanya.kanthu@infor.com";
	      	        final String password = "**********";*/
	      	  String users=configData.get("EMAILUSERS");
	      	        Properties props = new Properties();
	      	        //props.put("mail.smtp.auth", "true");
	      	       // props.put("mail.smtp.starttls.enable", "true");
	      	        props.put("mail.smtp.host", "smtp-relay.infor.com");
	      	        props.put("mail.smtp.port", "25");
	      	      Session session = Session.getDefaultInstance(props);
	      	      /*  Session session = Session.getInstance(props,
	      	          new javax.mail.Authenticator() {
	      	            protected PasswordAuthentication getPasswordAuthentication() {
	      	                return new PasswordAuthentication(username, password);
	      	            }
	      	          });*/

	      	      WebDriver driver1;
	      	      try {
	      	    	
	      	    		//Utility.driver=null;
					System.setProperty("webdriver.chrome.driver",".\\lib\\chromedriver.exe");
					driver1=new ChromeDriver();
					 driver1.manage().window().maximize();
					 Actions.pause(2);
	      	    	//driver1.get(RpPath+"\\logs\\"+time+"\\"+Utility.suite+".html");
					 driver1.get(RpPath+"\\logs\\"+Utility.date+"\\"+Utility.time_milli+"\\"+Utility.suite+".html");
	    			 driver1.findElement(Global.dashBorad).click();
	    			 Actions.pause(2);
	    			String passCount= driver1.findElement(By.xpath("//span[text()='Tests View']/../following::div[3]/descendant::span[2]")).getText();
	    			String failCount= driver1.findElement(By.xpath("//span[text()='Tests View']/../following::div[4]/descendant::span[2]")).getText();
	    			int pass=Integer.parseInt(passCount);
	    			int fail=Integer.parseInt(failCount);
	    			int toal=pass+fail;
	    			String totalCount=String.valueOf(toal).toString();
	    			 File scrFile = ((TakesScreenshot)driver1). getScreenshotAs(OutputType.FILE);
	    			   //The below method will save the screen shot in d drive with name "screenshot.png"
	    			   String file=RpPath+"\\logs\\"+Utility.date+"\\"+Utility.time_milli+"\\"+Utility.suite+".png";
	    			      FileUtils.copyFile(scrFile, new File(RpPath+"\\logs\\"+Utility.date+"\\"+Utility.time_milli+"\\"+Utility.suite+".png"));
	    			      driver1.close();
	      	    	
	    			      HashMap<String, String> testData=Utility.getConfigData();
	    					String env=testData.get("ENVIRONMENT").toUpperCase();
	    					String url=testData.get("URL").toUpperCase();
	    					System.out.println(env);
	    					
	    					switch(env)
	    					{

	    					case "CLOUD":
	    					{
	    						Actions.pause(.5);
	    						
	    							System.out.println("in the cloud if condition");
	    							String[] path=url.split("-");	
	    							 System.out.println(path[0].split("//"));
	    							 
	    							 String[] path1=path[0].split("//");
	    							 System.out.println(path1[1]);
	    							 //String[] path2=path1[1].split("-");
	    							 version=path1[1];
	    						break;
	    					}
	    					case "OP":
	    					{
	    						Actions.pause(.5);
	    						
	    							 String[] path=url.split("//");	
	    							 String[] path1=path[1].split(":");
	    							 System.out.println(path1[0]);
	    							 String val=path1[0];
	    							 String[] output = val.split("\\.");
	    							 System.out.println(output[0]);
	    							  version=output[0];
	    						}
	    						break;
	    					}
	    					
	    			      // Create a default MimeMessage object.
	    			      Message message = new MimeMessage(session);

	    			      // Set From: header field of the header.
	    			      message.setFrom(new InternetAddress(from));

	    			      // Set To: header field of the header.
	    			      message.setRecipients(Message.RecipientType.TO,
	    			         InternetAddress.parse(users));

	    			      // Set Subject: header field
	    			    //  message.setSubject("Mingle Automation Test Report : "+configData.get("ENVIRONMENT")+"  "+"Pass Count:"+passCount+" "+"Fail Count:"+failCount+" "+"Total Count:"+totalCount);
	    			      message.setSubject("Mingle Automation Test Report : "+configData.get("ENVIRONMENT")+"  "+configData.get("URL") +"Total Scripts : "+totalCount+" Passed Scripts : "+passCount+" "+" Failed Scripts : "+failCount);
	    			      // This mail has 2 part, the BODY and the embedded image
	    			      Multipart  multipart = new MimeMultipart("related");

	    			      // first part (the html)
	    			      BodyPart messageBodyPart = new MimeBodyPart();
	    			      String htmlText = "<H2>Mingle Automation Test Report: Environment: "+configData.get("ENVIRONMENT")+ " Browser : "+Utility.browser1+"</H2><img src=\"cid:image\">";
	    			      //String htmlText="<H1>Mingle Automation Test Report: ENV"+configData.get("ENVIRONMENT")+"Browser:"+"</H1><img src=\"cid:image\">";
	    			      messageBodyPart.setContent(htmlText, "text/html");
	    			      // add it
	    			      multipart.addBodyPart(messageBodyPart);

	    			      // second part (the image)
	    			      messageBodyPart = new MimeBodyPart();
	    			      DataSource fds = new FileDataSource(
	    			        file);

	    			      messageBodyPart.setDataHandler(new DataHandler(fds));
	    			      messageBodyPart.setHeader("Content-ID", "<image>");
	    			      
	    			      MimeBodyPart messageBodyPart2 = new MimeBodyPart();  
	    			      
	    			      //  String filename = "SendAttachment.java";//change accordingly  
	    			        DataSource source = new FileDataSource(reportFileName);  
	    			        messageBodyPart2.setDataHandler(new DataHandler(source));
	    			        String s=reportFileName.substring(reportFileName.indexOf(".")+1).trim();
	    			        
	    			        messageBodyPart2.setFileName(s);  
	    			      
	    			      
	    			      // add image to the multipart
	    			      multipart.addBodyPart(messageBodyPart);
	    			      multipart.addBodyPart(messageBodyPart2);

	    			      // put everything together
	    			      message.setContent(multipart);
	    			      // Send message
	    			      Transport.send(message);
	    			      
	      	        

	      	     } catch (Exception e) {
	      	    	Actions.log4j.info("************* Email not Sent ********************** : "+e);
	      	        throw new RuntimeException(e);
	      	     }

	      	         
	      	    Actions.log4j.info("***************** Email Sent Successfully ***************");
	      	      
	      	   }
	        	  
	        	  //UPLOAD FILE
	        	  public static void setClipboardData(String string) {
	        			//StringSelection is a class that can be used for copy and paste operations.
	        			   StringSelection stringSelection = new StringSelection(string);
	        			   Toolkit.getDefaultToolkit().getSystemClipboard().setContents(stringSelection, null);
	        			}
	        		
	        		public static void uploadFile(String fileLocation) {
	        	        try {
	        	        	//Setting clipboard with file location
	        	        	Actions.pause(2);
	        	            setClipboardData(fileLocation);
	        	            //native key strokes for CTRL, V and ENTER keys
	        	            Robot robot = new Robot();
	        	            robot.delay(1500);
	        	            /*robot.keyPress(KeyEvent.VK_CONTROL);
	        	            robot.keyPress(KeyEvent.VK_V);
	        	            robot.keyRelease(KeyEvent.VK_V);
	        	            robot.keyRelease(KeyEvent.VK_CONTROL);
	        	            robot.keyPress(KeyEvent.VK_ENTER);
	        	            robot.keyRelease(KeyEvent.VK_ENTER);*/
	        	            // Press Enter
	        	            robot.keyPress(KeyEvent.VK_ENTER);
	        	            
	        	           // Release Enter
	        	            robot.keyRelease(KeyEvent.VK_ENTER);
	        	            
	        	             // Press CTRL+V
	        	            robot.keyPress(KeyEvent.VK_CONTROL);
	        	            robot.keyPress(KeyEvent.VK_V);
	        	            
	        	           // Release CTRL+V
	        	            robot.keyRelease(KeyEvent.VK_CONTROL);
	        	            robot.keyRelease(KeyEvent.VK_V);
	        	            Thread.sleep(1000);
	        	                   
	        	                   
	        	            robot.keyPress(KeyEvent.VK_ENTER);
	        	            robot.keyRelease(KeyEvent.VK_ENTER);
	        	           
	        	        } catch (Exception exp) {
	        	        	exp.printStackTrace();
	        	        }
	        	    }
	        		public static class MyException extends Exception{
	        		    String str1;
	        		    public MyException(String str2) {
	        		       str1=str2;
	        		    }
	        		    public String toString(){ 
	        		       return ("Exception : "+str1) ;
	        		    }
	        		}
	        public static void sendConsolidatedMail()  {
	        	
		        		//  String to = "lavanya.kanthu@infor.com,suresh.nagineni@infor.com,ranjitha.anumukonda@infor.com";
		        		  //greg.smart@infor.com,narahari.ankam@infor.com

		        		    // Sender's email ID needs to be mentioned
		        		    String from ="mingleqaauto@infor.com";
		        		    Properties props = new Properties();
		        		    props.put("mail.smtp.host", "smtp-relay.infor.com");
		        		    props.put("mail.smtp.port", "25");
		        		    Session session = Session.getDefaultInstance(props);
		        		    
		        			HashMap<String, String> configData=Utility.getConfigData();
		        			String userDetails=configData.get("EAMILUSERS_CONSOLIDATED");
		        		    WebDriver driver1;
		        		    try {
		      	    	
		        		    	
		        		    	//System.setProperty("webdriver.chrome.driver",".\\lib\\chromedriver.exe");
		        		    	//driver1=new ChromeDriver();
		        		    	driver1=new FirefoxDriver();
		        		    	driver1.manage().window().maximize();
		        		    	driver1.manage().timeouts().implicitlyWait(2, TimeUnit.MINUTES);
		        		    	//Actions.pause(2);
		        		    	driver1.get("http://"+MongoDbServerIP+":1337");
		        		    	Actions.pause(4);
		        		    	driver1.findElement(By.xpath("//a[@title='Reports']")).click();
		        		    	Actions.pause(4);
		        		    	driver1.findElement(By.id("project-dropdown")).click();
		        		    	driver1.findElement(By.xpath("//span[text()='"+projectName+"']")).click();
		        		    	Actions.pause(4);
		        		    	String passCount= driver1.findElement(By.xpath("//div[contains(text(),'Tests Passed')]/../descendant::strong")).getText();
		        		    	String failCount= driver1.findElement(By.xpath("//div[contains(text(),'Tests Failed')]/../descendant::strong")).getText();
		        		    	String totalCount=driver1.findElement(By.xpath("//div[contains(text(),'Total Tests')]/../descendant::strong")).getText();
		        		    	File scrFile = ((TakesScreenshot)driver1). getScreenshotAs(OutputType.FILE);
		        		    	//The below method will save the screen shot in d drive with name "screenshot.png"
		        		    	String file=RpPath+"\\logs\\"+Utility.date+"\\"+Utility.time_milli+"\\screenshot.png";
		        		    	FileUtils.copyFile(scrFile, new File(RpPath+"\\logs\\"+Utility.date+"\\"+Utility.time_milli+"\\screenshot.png"));
		        		    	
		        		    	driver1.close();
		      	    	
		        		    	HashMap<String, String> testData=Utility.getConfigData();
		    					String env=testData.get("ENVIRONMENT").toUpperCase();
		    					String url=testData.get("URL").toUpperCase();
		    					System.out.println(env);
		    					
		    					switch(env)
		    					{

		    					case "CLOUD":
		    					{
		    						Actions.pause(.5);
		    						
		    							System.out.println("in the cloud if condition");
		    							String[] path=url.split("-");	
		    							 System.out.println(path[0].split("//"));
		    							 
		    							 String[] path1=path[0].split("//");
		    							 System.out.println(path1[1]);
		    							 //String[] path2=path1[1].split("-");
		    							 version=path1[1];
		    						break;
		    					}
		    					case "OP":
		    					{
		    						Actions.pause(.5);
		    						
		    							 String[] path=url.split("//");	
		    							 String[] path1=path[1].split(":");
		    							 System.out.println(path1[0]);
		    							 String val=path1[0];
		    							 String[] output = val.split("\\.");
		    							 System.out.println(output[0]);
		    							  version=output[0];
		    						}
		    						break;
		    					}
		    					
		    			      // Create a default MimeMessage object.
		    			      Message message = new MimeMessage(session);

		    			      // Set From: header field of the header.
		    			      message.setFrom(new InternetAddress(from));

		    			      // Set To: header field of the header.
		    			      message.setRecipients(Message.RecipientType.TO,
		    			         InternetAddress.parse(userDetails));

		    			      // Set Subject: header field
		    			    //  message.setSubject("Mingle Automation Test Report : "+configData.get("ENVIRONMENT")+"  "+"Pass Count:"+passCount+" "+"Fail Count:"+failCount+" "+"Total Count:"+totalCount);
		    			      message.setSubject("Mingle Automation Test Report : "+configData.get("ENVIRONMENT")+"  "+configData.get("URL")+"Total Scripts : "+totalCount+" Passed Scripts : "+passCount+" "+" Failed Scripts : "+failCount);
		    			      // This mail has 2 part, the BODY and the embedded image
		    			      Multipart  multipart = new MimeMultipart("related");

		    			      // first part (the html)
		    			      BodyPart messageBodyPart = new MimeBodyPart();
		    			      String htmlText = "<H2>Mingle Automation Test Report: Environment: "+configData.get("ENVIRONMENT")+ " Browser : "+Utility.browser1+"</H2><img src=\"cid:image\">";
		    			      messageBodyPart.setContent(htmlText, "text/html");
		    			      // add it
		    			      multipart.addBodyPart(messageBodyPart);

		    			      // second part (the image)
		    			      messageBodyPart = new MimeBodyPart();
		    			      DataSource fds = new FileDataSource(
		    			        file);

		    			      messageBodyPart.setDataHandler(new DataHandler(fds));
		    			      messageBodyPart.setHeader("Content-ID", "<image>");
		    			      // add image to the multipart
		    			      multipart.addBodyPart(messageBodyPart);
		    			     // multipart.addBodyPart(messageBodyPart2);

		    			      // put everything together
		    			      message.setContent(multipart);
		    			      // Send message
		    			      Transport.send(message);
		    			      
		      	        

		      	     } catch (Exception e) {
		      	    	Actions.log4j.info("************* Consolidated Email not Sent ********************** : "+e);
		      	        throw new RuntimeException(e);
		      	     }

		      	         
		      	    Actions.log4j.info("***************** Consolidated Email Sent Successfully ***************");
		      	      
		      	   }
	        public static void createFile(String path_fileName)
	        {
	        	
	        	File f=new File(path_fileName);
	        	if(!f.exists() && !f.isDirectory()) {
	        		try {
						f.createNewFile();
					} catch (IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
	        	    // do something
	        	}
	        }
	        public static void writeToFile(String path_fileName, int value)
	        {
	        	Properties prop = new Properties();
				OutputStream output = null;

				try {
					File f=new File(path_fileName);

					output = new FileOutputStream(f,true);
					

					// set the properties value
					//int v=Utility.getMingleBatchCount();
			
					prop.setProperty("MINGLE_BATCH_COUNT",Integer.toString(value));
					
				    // save properties to project root folder
					prop.store(output, null);
					//System.out.println("After Update :"+Utility.getMingleBatchCount());

				} catch (IOException io) {
					io.printStackTrace();
				} finally {
					if (output != null) {
						try {
							output.close();
						} catch (IOException e) {
							e.printStackTrace();
						}
					}

				}
	        }
			
			//////////////////////////////////////////////////////////////////
	        /////////////////////////////////////////////////////////////////
	        static org.w3c.dom.Node nodeClasses;
	        public static  DocumentBuilderFactory dbFactory;
	    	public static DocumentBuilder dBuilder;
	    	public static Document doc;
	    	public static Element classess1;
	    	public static String path=RpPath+"\\rerun\\Rerun1.xml";
	    	public static String path2=RpPath+"\\Rerun.xml";
	    	public static Transformer transformer1;
	    	//public static void main(String args[])
	    	public static void createXmlBasicStructure()
	    	{
	    		/*File f=new File(path);
	        	f.delete();*/
	    		 //try {
	    		Actions.log4j.info("Establishing Connection to the Rerun.xml file");
	    			 dbFactory =DocumentBuilderFactory.newInstance();
	    			 try {
						dBuilder =dbFactory.newDocumentBuilder();
						doc=dBuilder.parse(path2);
						doc.getDocumentElement().normalize();
			    		Utility.nodeClasses=doc.getElementsByTagName("classes").item(0);
			    		Actions.log4j.info("Connection is Established to the Rerun.xml file");
					} catch (Exception e) {
						// TODO Auto-generated catch block
						Actions.log4j.info("Got Exception While Establishing Connection to the Rerun.xml file");
						e.printStackTrace();
					}
	    			 // Below is usefull for Write XML Method
					try {
						transformer1 = TransformerFactory.newInstance().newTransformer();
					} catch (Exception e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					} 
		    			
	    			 //doc = dBuilder.newDocument();
	    			 
	    	         // Suite element
	    	        /* Element suite1 = doc.createElement("suite");
	    	         doc.appendChild(suite1);
	    	         Attr attrR = doc.createAttribute("name");
	    	         attrR.setValue("suite1");
	    	         suite1.setAttributeNode(attrR);
	    	         //Test Element
	    	        
	    	         Element test1 = doc.createElement("test");
	    	         suite1.appendChild(test1);
	    	         Attr attrT = doc.createAttribute("name");
	    	         attrT.setValue("test1");
	    	         test1.setAttributeNode(attrT);
	    	         //Classess Element
	    	         Utility.classess1 = doc.createElement("classes");
	    	         test1.appendChild(classess1);
	    	          Attr aClassess = doc.createAttribute("id");
	    	         aClassess.setValue("classess1");
	    	         classess1.setAttributeNode(aClassess);
	    	         
	    	         //Class Element
	    	         Element class1 = doc.createElement("class");
	    	         Utility.classess1.appendChild(class1);
	    	         Attr nAttr1 = doc.createAttribute("name");
	    	         nAttr1.setValue("utility.Utility");
	    	         class1.setAttributeNode(nAttr1);
	    	         DOMSource source = new DOMSource(doc);
	    		        
	    	         writeToXml(source,createXml(Utility.path));
	    	         
	    	        
	    	         
	    	         
	    	      } catch (Exception e) {
	    	         e.printStackTrace();
	    	      }*/
	    	   }
	    	public static StreamResult result;
			//private static Element classess2;
	    	public static StreamResult createXml(String xmlPath)
	    	{
	    		String s=xmlPath.substring(0,xmlPath.lastIndexOf("\\")).trim().toString();
	    		System.out.println(s);
	    		File f = new File(s);
	             f.mkdirs();
	    		return new StreamResult(new File(xmlPath));
	    	}
	    	public static void writeToXml(DOMSource source,StreamResult result)
	    	{
	    		try {
	    			
	    			transformer1.setOutputProperty(OutputKeys.MEDIA_TYPE, "yes");
	    			transformer1.setOutputProperty(OutputKeys.STANDALONE, "yes");
	    			transformer1.setOutputProperty(OutputKeys.INDENT, "yes");
	    			transformer1.setOutputProperty(OutputKeys.DOCTYPE_SYSTEM, "http://testng.org/testng-1.0.dtd");
	    			transformer1.setOutputProperty("{http://xml.apache.org/xslt}indent-amount", "6");
	    			transformer1.transform(source, result);
	    			
	    		} catch (Exception e) {
	    			// TODO Auto-generated catch block
	    			Actions.log4j.info("Got Exception while write Faild Class to the Rerun.xml file");
	    			e.printStackTrace();
	    		}
	    		
	    	}
	    	public static void addClass(String className)
	    	{
	    		
	    		Actions.log4j.info(className +" is going to Add to the Rerun.xml file");
	    		 Element class1 = doc.createElement("class");
	    		 Utility.nodeClasses.appendChild(class1);
	    		 Attr nAttr1 = doc.createAttribute("name");
	             nAttr1.setValue(className);
	             class1.setAttributeNode(nAttr1);
	             DOMSource source = new DOMSource(doc);
	    	        
	             writeToXml(source,createXml(Utility.path2));
	             Actions.log4j.info(className +" is Added to the Rerun.xml file");
	             
	             
	    	}
	    	
	    	
	    	///////////////////////////////////////////////////////////////
	    	//////////////////////////////////////////////////////////////
	        
	        	
}

