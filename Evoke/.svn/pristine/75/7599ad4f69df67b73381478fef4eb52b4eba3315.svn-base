package scripts.ActivityFeed;

import org.apache.commons.lang3.RandomStringUtils;
import org.testng.annotations.AfterClass;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import actions.Actions;
import objRepository.Global;
import objRepository.Social.ActivityFeed;
import reusableMethods.RM_Social;
import utility.Utility;

public class Ts_AddCommentAndDeleteCommentToPost_12755 {

	private Utility utl;
	//ExtentTest logger;

	
	public static String className;
	@BeforeClass
	public void setUp()
	{
		utl=new Utility();
		utl.initTest(this.getClass().getName().substring(this.getClass().getName().lastIndexOf(".")+1).trim());
		className=this.getClass().getName().toString();
		new Actions();
	}
	@AfterMethod
	public void logOutAndBrowserClose()
	{
		Actions.logOutAndBrowserCloseMU();
	}
	@AfterClass
	public void endReport() 
	{
		Actions.endScriptReportMU();


	}
	String time=RandomStringUtils.randomNumeric(4);
	String postMsg=Utility.getTestData().get("POSTMSG")+time;
	String commMsg=Utility.getTestData().get("COMMENTMSG")+time;
	@Test
	public void postMsg()
	{
		
		try{
		Global.login(Utility.getConfigData().get("USER20"), Utility.getConfigData().get("PASSWORD"));
		//Actions.pause(3);
		RM_Social.navigateToActivityPage();
		Actions.click(ActivityFeed.privacyLink, "Open Privacy List");
		RM_Social.selectPrivacyInAFP(Utility.getTestData().get("PRIVACY_CONNECTEDUSERS"));
		RM_Social.typeMessageInAFP(postMsg);
		RM_Social.clickOnPostBtnInAFP();
		RM_Social.clickOnActivityFeed();
		RM_Social.verifyMessage(postMsg);
		RM_Social.makeComment(postMsg, commMsg);
		RM_Social.deleteComment(postMsg);
		
		}catch(Exception e)
		{
			Utility.addClass(className);
		}finally{
			RM_Social.clickOnActivityFeed();
			RM_Social.deleteMsg(postMsg);
		}
	}
	


}
