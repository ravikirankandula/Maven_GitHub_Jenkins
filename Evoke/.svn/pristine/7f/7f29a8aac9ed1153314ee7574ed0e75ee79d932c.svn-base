package reusableMethods;

import java.io.File;
import java.io.IOException;
import java.util.HashMap;

import org.apache.commons.lang3.RandomStringUtils;
import org.openqa.selenium.By;

import actions.Actions;
import objRepository.Global;
import objRepository.Admin.Admin_ManageApp;
import objRepository.IONAPI.AddNewAPISuite;
import objRepository.IONAPI.AddNewAPISuite_V_13;
import objRepository.IONAPI.IONAPI;
import objRepository.IONAPI.IONAPIAuthorizedApps;
import objRepository.IONAPI.IONAPIAuthorizedApps_V_13;
import objRepository.IONAPI.IONAPI_V_13;
import objRepository.IONAPI.MobileApps;
import objRepository.Social.AppMenu;
import objRepository.Social.ShellHeader;
import utility.Utility;

public class RM_IONAPI_V_13 {
	//NAVIGATE TO USER MENU
		public final static String RpPath=System.getProperty("user.dir");
		public static void navigateToActivityPage()
		{
			//Actions.moveTo(AppMenu.appMenu, "Click on AppMenu");
			Actions.pause(2);
			//Actions.verifyElement(AppMenu.inforIonApi,"Verify presence of 'ION API' from App Menu ");
			Actions.click_JS(AppMenu.inforIonApi, "Click on ION API");
			//RM_Admin.verify_Menu("Infor ION API");
			Actions.switchtoFrame(Global.IONCLFrame, "Switch to the Frame");
			Actions.verifyElementPresent(IONAPI.add_NewApiSuite,"Verify presence of 'API Suite' button ");

		}


		//NAVIGATE TO USER MENU
		public static void navigateToMenu(String menu)
		{
			Actions.click(ShellHeader.userMenu, "Click on App Mneu");
			Actions.click(By.xpath("//span[text()='"+menu+"']"), "Click on Menu Details"+menu);
			Actions.switchtoFrame(Global.IONCLFrame, "Switch to the Frame");
		}
		//CLICK ON ADD NEW API SUITE
		public static void click_AddApi(){
			Actions.verifyElement(IONAPIAuthorizedApps_V_13.addNewAPISuite, "Verify presence of API Suite");
			Actions.click(IONAPIAuthorizedApps_V_13.addNewAPISuite, "Click on API SUite");
		}

		//CLICK ON AUTHORIZED APPS
		public static void click_AuthorizedApps(){
			Actions.click(IONAPI_V_13.collapse_Icon, "Collapse ICON");
			Actions.verifyElement(IONAPI_V_13.authorized_Apps,"Verify presence of 'Authorized Apps' Links ");
			Actions.click(IONAPI_V_13.authorized_Apps, "Click on Authorized APPS");
			

		}
		
		//CLICK ON AUTHORIZED APPS
			public static void click_AvailableAPIS(){
				Actions.verifyElement(IONAPI.availableAPIs,"Verify presence of 'Available APIS' Links ");
				Actions.click(IONAPI.availableAPIs, "Click on Available APIS");
				

			}
		//CLICK ON AUTHORIZED APPS
		public static void click_APIMetaData(){
			Actions.verifyElement(IONAPI_V_13.api_Metadata,"Verify presence of 'API Meta Data' Links ");
			Actions.click(IONAPI_V_13.api_Metadata, "Click on API Meta Data");
			

		}

		//CLICK ON Add AUTHORIZED APPS
		public static void click_AddAuthorizedApps(){
			Actions.verifyElement(IONAPIAuthorizedApps_V_13.addNewApp,"Verify presence of 'Add New Authorized Apps' Links ");
			Actions.click(IONAPIAuthorizedApps_V_13.addNewApp, "Click on Add New Authorized APPS");
		}
		
		
		public static void click_GeneralSettingstab(){
			Actions.scrollToElement(IONAPI_V_13.general_Settings);
			Actions.verifyElement(IONAPI_V_13.general_Settings,"Verify presence of 'general Settings'tab ");
			Actions.click(IONAPI_V_13.general_Settings, "Click on general Settings");
		}
		
	/*	public static void uploadUisng_Jacob(){
			final String jacobdllarch = System.getProperty("sun.arch.data.model")
					.contains("32") ? "jacob-1.18-x86.dll" : "jacob-1.18-x64.dll";
		
	 
			File filejacob = new File("C:\\Mingle2\\Mingle_12.0.7\\lib\\jacob-1.18 (1)\\jacob-1.18");
			System.setProperty(LibraryLoader.JACOB_DLL_PATH,
					filejacob.getAbsolutePath());
			String jacobDllVersionToUse;
			if(System.getProperty("sun.arch.data.model").contains("32"))
			{
			jacobDllVersionToUse = "jacob-1.18-x86.dll";
			}
			else {
			jacobDllVersionToUse = "jacob-1.18-x64.dll";
			}
			File file = new File("C:\\Mingle2\\Mingle_12.0.7\\lib\\jacob-1.18 (1)\\jacob-1.18\\", jacobDllVersionToUse);
			System.setProperty(LibraryLoader.JACOB_DLL_PATH, file.getAbsolutePath());
			 System.out.println(file.getAbsolutePath()+"************");
			AutoItX uploadWindow = new AutoItX();
			if (uploadWindow.winWaitActive("Open")) {
			
					uploadWindow.sleep(1000);
					uploadWindow.send(RpPath+"\\ION.der");
					uploadWindow.sleep(1000);
					uploadWindow.controlClick("Open", "", "1");
	 
				
			}
		}*/
		//CREATE ANDROID APP
		public static void create_android(String name,String desc,String redirectURL,String downloadURL) {
			Actions.type(IONAPIAuthorizedApps_V_13.appName,name,"Enter App Name Details:");
			Actions.click_JS(IONAPIAuthorizedApps_V_13.android, "Click on Mobile Android Type");
			Actions.type(IONAPIAuthorizedApps_V_13.description,desc,"Enter Description Details:");
			Actions.type(IONAPIAuthorizedApps_V_13.redirectURL,redirectURL,"Enter Redirect URL Details:");
			Actions.type(IONAPIAuthorizedApps_V_13.downloadURL,downloadURL,"Enter Download URL Details:");
			Actions.type(IONAPIAuthorizedApps_V_13.refreshToken,"2","Enter Grant Life Time Details:");
			save();
		/*	if(Utility.browser1.equalsIgnoreCase("Chrome")){
				System.out.println("in the if condition");
				//Actions.click(IONAPIAuthorizedApps.authorized_mobileAndroidLoadCertificate, "Click on Load Ceritificate");
				Actions.pause(2);
		//	Utility.uploadFile(RpPath+"\\ION.der");
			// switch to the file upload window
				//uploadUisng_Jacob();
				try {
					Runtime.getRuntime().exec(RpPath+"\\chrome.exe"+" "+RpPath+"\\ION.der");
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}  
			save();
			}*/
			/*if(Utility.browser.equalsIgnoreCase("IE")){
				System.out.println("in the if condition");
				Actions.click(IONAPIAuthorizedApps.authorized_mobileAndroidLoadCertificateIE, "Click on Load Ceritificate");
				Actions.pause(2);
				//Process process = new ProcessBuilder(RpPath+"\\upload.exe", RpPath+"\\ION.der", "Open").start();	
				Utility.uploadFile(RpPath+"\\ION.der");
				Actions.pause(2);
				save();
			}*/
			
			}
			
		/*if(Utility.browser1.equalsIgnoreCase("IE")){
			
			Screen screen = new Screen();



			//Add image path  

			Pattern image = new Pattern(RpPath+"\\FileUpload.png");
			Pattern image1 = new Pattern(RpPath+"\\File.png");
			   

			//Wait 10ms for image 

			screen.wait(image1, 10);

			screen.type(image, RpPath+"\\ION.der");

			//Click on the image

			screen.click(image1);
		}*/
			//Actions.pause(10);
			

		
		//CREATE OTHER APP			
		public static void create_Other(String name,String desc,String redirectURL,String downloadURL){
			Actions.type(IONAPIAuthorizedApps_V_13.appName,name,"Enter App Name Details:");
			//Actions.verifyElement(IONAPIAuthorizedApps.authorized_mobileOthersType, "Verify presence of Mobile Other Type");
			Actions.click_JS(IONAPIAuthorizedApps_V_13.others, "Click on Mobile Other Type");
			Actions.type(IONAPIAuthorizedApps_V_13.description,desc,"Enter Description Details:");
			Actions.type(IONAPIAuthorizedApps_V_13.redirectURL,redirectURL,"Enter Redirect URL Details:");
			Actions.type(IONAPIAuthorizedApps_V_13.downloadURL,downloadURL,"Enter Download URL Details:");
			save();

		}
		//Reset Secret 
		public static void reset_Secret(String verification){
			System.out.println("in the reset method");
			Actions.pause(3);
			Actions.verifyElement(IONAPIAuthorizedApps_V_13.resetSecret, "Verify presence of  Reset Secret");
			Actions.click(IONAPIAuthorizedApps_V_13.resetSecret, "Click on Reset Secret");
			Actions.verifyElement(IONAPIAuthorizedApps_V_13.verify_resetSecret,"Verify presence Of Complete");
			String complete=Actions.getText(IONAPIAuthorizedApps_V_13.verify_resetSecret);
			Actions.verifyString(complete, verification);
		}


		//Download Credentials
		public static void download_Credentials(String verification){
			Actions.click(IONAPIAuthorizedApps_V_13.downloadCredentials, "Click on Download Credentials");
			Actions.pause(4);
			Actions.esc();
			if(Actions.verifyElementPresent(IONAPIAuthorizedApps_V_13.verify_DownloadCredentials,"Verify presence Of Complete")){
				String complete=Actions.getText(IONAPIAuthorizedApps_V_13.verify_DownloadCredentials);
			Actions.verifyString(complete, verification);
			}
		
			File folder = new File(RpPath+"\\Downloads");
			File[] listOfFiles = folder.listFiles();

			    for (int i = 0; i < listOfFiles.length; i++) {
			      if (listOfFiles[i].isFile()) {
			        System.out.println("File " + listOfFiles[i].getName());
			        try{
			File f1=new File(RpPath+"\\Downloads\\"+listOfFiles[i].getName());
	    	f1.delete();
			        }
			        catch (Exception e) {
						// TODO: handle exception
			        	e.printStackTrace();
					}
			      }
			    }
		}

		//EMAIL QR CODE to Users

		public static void emailQRCode(String user,String userDetails,String verification){
			Actions.pause1(.5);
			Actions.click(IONAPIAuthorizedApps_V_13.emailQRCode, "Click on Email QR Code");
			Actions.type(IONAPIAuthorizedApps_V_13.authorized_mobileQRCodeUser,user,"Enter User Details:");
			Actions.pause1(2);
			Actions.verifyElement(By.xpath("//ul[@id='suggestions']/descendant::span[text()='"+userDetails+"']"), "Verify presence of Email From the list");
			Actions.pause1(2);
			Actions.click(By.xpath("//ul[@id='suggestions']/descendant::span[text()='"+userDetails+"']"), "Select Email User from the list");
			Actions.click(IONAPIAuthorizedApps_V_13.send, "Click on Email QR code from Model Container");
			Actions.click(IONAPIAuthorizedApps_V_13.ok, "Click on OK Button");
			Actions.verifyElementPresent(IONAPIAuthorizedApps_V_13.verify_emailQRCode, verification);
		}
		//Cancel Button
		public static void cancel_Button(String app){
			Actions.click(IONAPIAuthorizedApps_V_13.cancel, "Click on Cancel");
			/*String appDetails=Actions.getText(By.xpath("//span[text()='"+app+"']"));
			Actions.verifyString(app, appDetails);*/
			Actions.click(Global.yes, "Click on Yes Button");
		}
		//EDIT Android APP
		public static void edit_AndroidApp(String testDesc,String pkgName){
			Actions.clearText(IONAPIAuthorizedApps_V_13.description, "Clear the Description");
			Actions.type(IONAPIAuthorizedApps_V_13.description,testDesc,"Enter Test Desc Details:");
			Actions.type(IONAPIAuthorizedApps_V_13.package_Name,pkgName,"Enter Package Details:");
			save();
		}


		//EDIT IOS APP
		public static void edit_IOSApp(String testDesc,String bundleID){
			Actions.type(IONAPIAuthorizedApps_V_13.description,testDesc,"Enter Test Desc Details:");
			//Actions.type(IONAPIAuthorizedApps.authorized_bundleID,bundleID,"Enter Bundle ID Details:");
			save();
		}


		//EDIT IOS APP
		public static void edit_WindowsApp(String testDesc){
			Actions.type(IONAPIAuthorizedApps_V_13.description,testDesc,"Enter Test Desc Details:");
			save();
		}
		//DELETE APP
		public static void delete_App(String app){
			navigateToActivityPage();
			click_AuthorizedApps();
			Actions.pause(1);
			Actions.type(By.id("searchfield"), app, "Search App Details:"+app);
			Actions.enter();
			String appDetails=Actions.getText(By.xpath("//h3[text()='"+app+"']"));
			if(appDetails.equals(app)){
				Actions.verifyElement(By.xpath("//h3[text()='"+app+"']/following::button[@title='Delete']"), "Verify presence of created App");
				Actions.pause(1);
				Actions.click(By.xpath("//h3[text()='"+app+"']/following::button[@title='Delete']"), "Click on Created App related Delete Button");
				Actions.click(Global.yes, "Click on Yes Button");
				//Actions.click(IONAPIAuthorizedApps_V_13.ok, "Click on OK Button");
			}		

		}

		//DELETE SUITE
		public static void delete_Suite(String search,String app){
			Actions.switchToDefaultContent();
			navigateToActivityPage();
			Actions.select(By.xpath("//select[@data-ng-model='UI.selectedSuiteType']"), search, "Select: "+search);
			Actions.click(By.xpath("//h3[text()='"+app+"']/../img"), "Select Related Suite");
			Actions.pause1(1.5);
			Actions.click(IONAPIAuthorizedApps.authorized_DeleteSuite, "Click onDelete API Suite");
			Actions.click(Global.yes, "Click on Yes Button");
			Actions.click(IONAPIAuthorizedApps_V_13.ok, "Click on OK Button");

		}
		
		public static void import_NonInforSuite(String search,String app) {
			System.out.println("in the import export method");
			Actions.switchToDefaultContent();
			navigateToActivityPage();
			Actions.verifyElement(MobileApps.search, "Verify presence of Search");
			
			Actions.click(IONAPIAuthorizedApps_V_13.select,"Select App Name Details:");
			Actions.click(By.xpath("//a[text()='"+search+"']"), "Click on Device Name");
			//Actions.select(By.xpath("//select[@data-ng-model='UI.selectedSuiteType']"), search, "Select: "+search);
			Actions.click_JS(IONAPIAuthorizedApps_V_13.exportButton, "Export button");
			Actions.pause1(2);
			//Actions.verifyElement(By.xpath("//span[text()='"+app+"']/../ancestor::Tr/descendant::input"), "Verify presence of select app");
			Actions.click_JS(By.xpath("//span[text()='"+app+"']/../ancestor::Tr/descendant::input"), "Select Application");
			Actions.click(IONAPIAuthorizedApps_V_13.exportSuite, "Click On Export Suite");
			Actions.pause1(9);
			File folder = new File(RpPath+"\\Downloads");
			File[] listOfFiles = folder.listFiles();

			    for (int i = 0; i < listOfFiles.length; i++) {
			    	System.out.println("File " + listOfFiles[i].getName());
			   
			    	 
			      
			        	 Actions.loggerDetails(listOfFiles[i].getName());
			        		Actions.refresh();
			    			RM_IONAPI_V_13.navigateToActivityPage();
			    			/*RM_IONAPI_V_13.click_AuthorizedApps();
			    			RM_IONAPI_V_13.click_AvailableAPIS();*/
			     		
			     		delete_SuiteDetails("Non-Infor Suites",app);
			     		//Actions.click(IONAPIAuthorizedApps_V_13.exportButton, "Import button");
			     		Actions.pause1(2);
			     		try {
							Runtime.getRuntime().exec(RpPath+"\\chrome.exe"+" "+RpPath+"\\Downloads\\"+listOfFiles[i].getName());
						} catch (IOException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}  
			     		Actions.pause1(2);
			     		Actions.click_JS(IONAPIAuthorizedApps_V_13.importButton, "Import Button");
			     		Actions.verifyElement(By.xpath("//span[text()='"+app+"']"), "Verify Presence of imported File");
			     		Actions.click(IONAPIAuthorizedApps_V_13.backButton, "Cick Oon Back Button");
			      File f1=new File(RpPath+"\\Downloads\\"+listOfFiles[i].getName());
		        	f1.delete();
			    }
			
		}
		
		public static void export_NonInforSuite(String search,String app){
			
			
			
		}
		
		//DELETE SUITE
			public static void verify_EndPointSuite(String search,String app,String endPointDetails){
				navigateToActivityPage();
				//Actions.select(By.xpath("//select[@data-ng-model='UI.selectedSuiteType']"), search, "Select: "+search);
				Actions.verifyElement(MobileApps.search, "Verify presence of Search");
				
				Actions.click(IONAPIAuthorizedApps_V_13.select,"Select App Name Details:");
				Actions.click(By.xpath("//a[text()='"+search+"']"), "Click on Device Name");
				Actions.verifyElement(By.xpath("//h3[text()='"+app+"']/../img"), "Verify presence of Related Suite");
				Actions.dblClick(By.xpath("//h3[text()='"+app+"']/../img"), "Select Related Suite");
				Actions.verifyElement(By.xpath("//button[text()='Details']"), "Verify Presence of Details");
				
				Actions.click(By.xpath("//button[text()='Details']"), "Click on Details button");
				Actions.verifyElement(By.xpath("//div[text()='Target Endpoint URL']/following::label"), "Verify Presence of EndPoint");
				Actions.pause(1);
				String endPoint=Actions.getText(By.xpath("//div[text()='Target Endpoint URL']/following::label"));
				//Actions.verifyString(endPointDetails, endPoint);
				Actions.verifyElement(By.xpath("//button[text()='Delete']"), "Verify  Delete button");
				Actions.click(By.xpath("//button[text()='Delete']"), "Click on Delete button");
				Actions.click(Global.yes, "Click on Yes Button");
				Actions.explicitWait_InVisibilityOfElement();
				Actions.waitUntill_PleaseWait();
				Actions.pause1(3);
				Actions.click_JS(IONAPIAuthorizedApps_V_13.ok, "Click on OK Button");
				
				Actions.explicitWait_InVisibilityOfElement();
				Actions.waitUntill_PleaseWait();
				Actions.pause1(3);
				Actions.click_JS(IONAPIAuthorizedApps_V_13.mcc_Back, "Click on Back Button");Actions.click(By.xpath("//h3[text()='"+app+"']/../img"), "Select Related Suite");
				
			}
	public static void delete_SuiteDetails(String search,String app){
		System.out.println("in the delte suite method");
		Actions.pause(1);
	//	Actions.select(By.xpath("//select[@data-ng-model='UI.selectedSuiteType']"), search, "Select: "+search);
		Actions.verifyElement(MobileApps.search, "Verify presence of Search");
		
		Actions.click(IONAPIAuthorizedApps_V_13.select,"Select App Name Details:");
		Actions.click(By.xpath("//a[text()='"+search+"']"), "Click on Device Name");
		Actions.click(By.xpath("//h3[text()='"+app+"']/../img"), "Select Related Suite");
		Actions.click(IONAPIAuthorizedApps.authorized_DeleteSuite, "Click onDelete API Suite");
		Actions.click(Global.yes, "Click on Yes Button");
		Actions.click(IONAPIAuthorizedApps_V_13.ok, "Click on OK Button");
	}
		//Create INFOR NONPROVISIONED SUITE
		public static String createNonProvisionedsuite(String appName,String version,String suite,String hostName,String accessKey,String secreteKey){
			//Actions.pause(2);
			Actions.verifyElement(AddNewAPISuite.infor_NonProvisionedSelectApplicationName,"Verify presence of 'Application Name'");
			Actions.waitUntill_PleaseWait();
		Actions.click(AddNewAPISuite.infor_NonProvisionedSelectApplicationName, "Select Application Name");
		Actions.pause1(1);
			 	Actions.click(By.xpath("//option[@value='1']"),"Click on the application Name");
			 	Actions.esc();
			//Actions.selectByIndex(AddNewAPISuite.infor_NonProvisionedSelectApplicationName, "Select Application Name");
			 	Actions.pause1(5);
			 	Actions.click(AddNewAPISuite.infor_NonProvisionedSelectVersion, "Select Version");
				Actions.pause1(1);
			 	Actions.click(By.xpath("//option[contains(text(),'Version')]/following::option"),"Click on the Versions");
			 	Actions.esc();
			//Actions.select(AddNewAPISuite.infor_NonProvisionedSelectVersion,"All Versions","Select Version Details:");
			
			Actions.click(AddNewAPISuite.infor_NonProvisionedSelectSuite, "Select Suite Name");
			Actions.pause1(2);
		 	Actions.click(By.xpath("//option[@data-infor-translate='select_suite']/following::option"),"Click on the Suite Name");
		 	Actions.esc();
		//	Actions.selectByIndex(AddNewAPISuite.infor_NonProvisionedSelectSuite,"Select Suite Name");
			String app=retreive_Suite();
			System.out.println(app+"*********");
			Actions.clearText(By.name("api_context"), "clear text");
			String context=app+RandomStringUtils.randomNumeric(3);
			Actions.type(By.name("api_context"), context, "enter api context name");
			Actions.type(AddNewAPISuite.infor_NonProvisionedHostName,hostName,"Enter Host Details:");
			Actions.type(AddNewAPISuite.infor_NonProvisionedAccessKey,accessKey,"Enter Access Key Details:");
			Actions.type(AddNewAPISuite.infor_NonProvisionedSecretKey,secreteKey,"Enter Secrete Key Details:");
			save();
			return app;
		}

		//ADD Deployment
		public static void addDeployment(String depName,String hostName,String port,String context,String tenantID,String accessKey,String secretKey){
			Actions.pause(1.5);
			Actions.verifyElement(AddNewAPISuite.infor_NonProvisionedAddDeployment, "Verify presence of 'Add Deployment Button' ");
			Actions.click_JS(AddNewAPISuite.infor_NonProvisionedAddDeployment, "Click on Infor Non Provisioned Add Deployment");
			Actions.type(AddNewAPISuite.infor_NonProvisionedAddDeploymentName,depName,"Enter Deployment Details:");
			Actions.type(AddNewAPISuite.infor_NonProvisionedAddDeploymentHostName,hostName,"Enter HostName Details:");
			Actions.type(AddNewAPISuite.infor_NonProvisionedAddDeploymentPort,port,"Enter Port Details:");
			Actions.pause(.9);
			Actions.type(AddNewAPISuite.infor_NonProvisionedAddDeploymentContext,context,"Enter Context Details:");
			Actions.type(AddNewAPISuite.infor_NonProvisionedAddDeploymentTenant,tenantID,"Enter Tenant Details:");		
			Actions.type(AddNewAPISuite.infor_NonProvisionedAddDeploymentEndPointAccessKey,accessKey,"Enter Access Key Details:");
			Actions.type(AddNewAPISuite.infor_NonProvisionedAddDeploymentEndPointSecreteKey,secretKey,"Enter Secrete Key Details:");
			save();		

		}


		//Asscosciate End Point
		public static String assosciate_EndPoint(String appName){
			//Actions.pause(2);
			//Global.minglePageLoad_IONAPI();
			Actions.click(AddNewAPISuite.infor_NonProvisionedAssociateEndPointsButton, "Click on Infor Non Provisioned Assosciate End Point");
			Actions.click(AddNewAPISuite.infor_NonProvisionedSelectAssociateEndPoints, "Select Assosciate End Point");
			Actions.click(IONAPIAuthorizedApps.save_EndPoint, "Click on Save");
			if(Actions.verifyElementPresent(IONAPIAuthorizedApps.authorized_mobileOK, "Verify presence of 'OK' button"))
			{
				Actions.pause(1);
				Actions.click(IONAPIAuthorizedApps.authorized_mobileOK, "Click on OK Button");
			}
			Actions.pause(2);
			//Actions.verifyElement(AddNewAPISuite.infor_NonProvisionedSelectAssociateEndPoints, "Verify Presence of  Assosciate End Point");
			Actions.verifyElement(By.xpath("//span[contains(text(),'"+appName+"')]/following::a"), "Verify presence of End Point");
			String depEndPoint=Actions.getText(By.xpath("//span[contains(text(),'"+appName+"')]/following::a"));
			System.out.println(depEndPoint);
			return depEndPoint;
			
		}

		//EDIT DEPLOYMENT INSTANCE
		public static void edit_DeploymentInstance(String hostName){
			//Actions.pause(2);
			Global.minglePageLoad_IONAPI();
			Actions.click(AddNewAPISuite.infor_NonProvisionedEdit, "Click on Infor Non Provisioned Assosciate End Point");
			Actions.type(AddNewAPISuite.infor_NonProvisionedAddDeploymentHostName,hostName,"Enter HostName Details:");
			save();
		}
		//DOWNLOAD BACKEND
		public static void backeEnd_Download(String user,String userDetails,String verification){
			Actions.click(IONAPIAuthorizedApps_V_13.downloadCredentials, "Click on Download Credentials");
			Actions.type(IONAPIAuthorizedApps.authorized_backendDownload,user,"Enter User Details:");
			Actions.verifyElement(By.xpath("//ul[@id='suggestions']/descendant::span[text()='"+userDetails+"']"), "Verify presence of 'Listed mail from live search container' ");
			Actions.pause(1);
			Actions.click_JS(By.xpath("//ul[@id='suggestions']/descendant::span[text()='"+userDetails+"']"), "Select Email User from the list");
			Actions.click(IONAPIAuthorizedApps_V_13.download, "Click on Download from Model Container");
			Actions.pause(3);
			Actions.esc();
			Actions.pause(3);
			Actions.verifyElementPresent(IONAPIAuthorizedApps_V_13.verify_DownloadCredentials, verification);
		}

		public static void save_NonInforSuite(){
			Actions.verifyElement(Global.save, "Save Button is verified");
			Actions.click(Global.save, "Click on Save Button");
			Global.minglePageLoad_Admin();
			if(Actions.verifyElementPresent(IONAPIAuthorizedApps_V_13.ok, "Verify presence of 'OK' button"))
			{
				Actions.click(IONAPIAuthorizedApps_V_13.ok, "Click on OK Button");
			}
		}
		//SAVE
		public static void save(){
			Actions.verifyElement(IONAPIAuthorizedApps_V_13.save, "Verify presence of 'Save' button");
			Actions.click(IONAPIAuthorizedApps_V_13.save, "Click on Save Button");
			if(Actions.verifyElementPresent(IONAPIAuthorizedApps_V_13.ok, "Verify presence of 'OK' button"))
			{
				Actions.pause(2);
				Actions.click_JS(IONAPIAuthorizedApps_V_13.ok, "Click on OK Button");
			}
		}

		//Create IOS
		public static void createIOS(String name,String desc,String redirectURL){
			Actions.verifyElement(IONAPIAuthorizedApps_V_13.appName, "Verify Presence of App Name Details");
			Actions.type(IONAPIAuthorizedApps_V_13.appName,name,"Enter App Name Details:");
			Actions.click_JS(IONAPIAuthorizedApps_V_13.ios, "Click on Mobile IOS Type");
			Actions.type(IONAPIAuthorizedApps_V_13.description,desc,"Enter Description Details:");
			Actions.type(IONAPIAuthorizedApps_V_13.redirectURL,redirectURL,"Enter Redirect URL Details:");
			save();
		}


		//Create Backend
		public static void createBackend(String name,String desc){
			Actions.verifyElement(IONAPIAuthorizedApps_V_13.appName, "Verify Presence of App Name Details");
			Actions.type(IONAPIAuthorizedApps_V_13.appName,name,"Enter App Name Details:");
			Actions.click_JS(IONAPIAuthorizedApps_V_13.backendService, "Click on Mobile Backend Type");
			Actions.type(IONAPIAuthorizedApps_V_13.description,desc,"Enter Description Details:");
			Global.minglePageLoad_IONAPI();
			save();
		}
		//Create Windows
		public static void createWindows(String name,String desc,String redirectURL){
			Actions.verifyElement(IONAPIAuthorizedApps_V_13.appName, "Verify Presence of App Name Details");
			Actions.type(IONAPIAuthorizedApps_V_13.appName,name,"Enter App Name Details:");
			Actions.click_JS(IONAPIAuthorizedApps_V_13.windows, "Click on Mobile Windows Type");
			Actions.type(IONAPIAuthorizedApps_V_13.description,desc,"Enter Description Details:");
			Actions.type(IONAPIAuthorizedApps_V_13.redirectURL,redirectURL,"Enter Redirect URL Details:");
			save();
		}
		//Create Web App
		public static void createWeb(String name,String desc,String redirectURL,String javaScriptOrigins){
			Actions.verifyElement(IONAPIAuthorizedApps_V_13.appName, "Verify Presence of App Name Details");
			Actions.type(IONAPIAuthorizedApps_V_13.appName,name,"Enter App Name Details:");
			Actions.click_JS(IONAPIAuthorizedApps_V_13.web, "Click on Mobile Windows Type");
			Actions.type(IONAPIAuthorizedApps_V_13.description,desc,"Enter Description Details:");
			Actions.type(IONAPIAuthorizedApps_V_13.redirectURL,redirectURL,"Enter Redirect URL Details:");
			System.out.println(javaScriptOrigins);
			Actions.type(IONAPIAuthorizedApps_V_13.authorizedOrigins,javaScriptOrigins,"Enter JavaScript Origin Details:");
			save();
		}

		public static void delete_InforProvisionedSuite(String suiteName){
			navigateToActivityPage();
			Actions.click(By.xpath("//h3[text()='"+suiteName+"']/../img"), "Select Suite Name");
			Actions.click(AddNewAPISuite.infor_NonProvisionedDeleteAPISuite, "Click on Delete API Suite");
			Actions.click(Global.yes, "Click on Yes Button");
			Actions.click(IONAPIAuthorizedApps.authorized_mobileOK, "Click on OK Button");

		}

		//public void retrieve Suite Name
		public static String retreive_Suite(){
			String context=Actions.getList(AddNewAPISuite.infor_NonProvisionedSelectSuite);
			System.out.println(context+"**************");
			return context;
		}


		//Create Suite
		public static String create_Suite(String appName,String version,String suite,String hostName,String accessKey,String secreteKey,String depName,String hostNameDetails,String port,String context,String tenant,String accessKeyDetails,String secretKeyDetails,String editDepDetails){
			navigateToActivityPage();
			click_AddApi();
			Actions.pause1(2);
			
			String app=createNonProvisionedsuite(appName,version,suite,hostName,accessKey,secreteKey);
			addDeployment(depName,hostNameDetails,port,context,tenant,accessKeyDetails,secretKeyDetails);
			edit_DeploymentInstance(editDepDetails);
			Actions.pause1(2);
			String depDetailsBefore=Actions.getText(By.xpath("//span[contains(text(),'"+depName+"')]/following::a"));
			String afterdepDetails=assosciate_EndPoint(depName);
			Actions.pause1(1);
			int depbefore = Integer.parseInt(depDetailsBefore);
			int depafter = depbefore+1;
			String strI = String.valueOf(depafter);
			System.out.println(strI+"***********");
		/*	if(afterdepDetails.equals(strI)){
				Actions.verifyElement(By.xpath("//span[contains(text(),'"+depName+"')]/following::a"),"Verify presence of endPoint"+afterdepDetails);
			}*/
		//	Actions.verifyString(afterdepDetails, strI);
			return app;

		}
		//CREATE ANDROID APP
		public static void create_AndroidApp(String name,String desc,String redirectURL,String downloadURL,String verification,String user,String userDetails,String testDesc,String pkgname) {
			navigateToActivityPage();
			click_AuthorizedApps();
			click_AddAuthorizedApps();
			create_android(name, desc, redirectURL, downloadURL);
			reset_Secret(verification);
			download_Credentials(verification);
			emailQRCode(user, userDetails,verification);
			edit_AndroidApp(testDesc,pkgname);
			cancel_Button(name);
			Actions.switchToDefaultContent();
			navigateToMenu("Mobile Apps");
			Actions.pause(1);
			select_MobileDevice("Mobile (Android)",name);
			Actions.verifyElement(By.xpath("//h3[@title='"+name+"']"), "Verify Presence of application"+name);
		}

		public static void refresh_Token(String name,String desc,String redirectURL,String downloadURL) {
			navigateToActivityPage();
			click_AuthorizedApps();
			click_AddAuthorizedApps();
			//create_android(name, desc, redirectURL, downloadURL);
			Actions.type(IONAPIAuthorizedApps_V_13.appName,name,"Enter App Name Details:");
			Actions.click_JS(IONAPIAuthorizedApps_V_13.android, "Click on Mobile Android Type");
			Actions.type(IONAPIAuthorizedApps_V_13.description,desc,"Enter Description Details:");
			Actions.type(IONAPIAuthorizedApps_V_13.redirectURL,redirectURL,"Enter Redirect URL Details:");
			Actions.type(IONAPIAuthorizedApps_V_13.downloadURL,downloadURL,"Enter Download URL Details:");
			Actions.click(IONAPIAuthorizedApps_V_13.select, "Click On Issue Refresh Drop");
			Actions.click(By.xpath("//a[text()='1 Hour']"), "Click On One Hour");
			//Actions.select(IONAPIAuthorizedApps_V_13.refreshToken, "1 Hour", "Select the Access Token");
		
			if(!Actions.isChecked(IONAPIAuthorizedApps_V_13.refreshToken)){
				System.out.println("in the conditions");
				Actions.type(IONAPIAuthorizedApps_V_13.refreshToken,"Test123","Enter Grant Life Time Details:");
				Actions.getText(IONAPIAuthorizedApps_V_13.refreshErrorMsg);
				if(Actions.verifyElementPresent(IONAPIAuthorizedApps_V_13.refreshErrorMsg,"Verify presence of 'Error Message for Grant life time not valid .'"))
				Actions.verifyElement(IONAPIAuthorizedApps_V_13.save, "Verify presence of 'Save' button");
				Actions.click(IONAPIAuthorizedApps_V_13.save, "Click on Save Button");
			}
			
		}
		public static void click_DownloadFile(){
			Actions.verifyElement(IONAPI_V_13.download,"Verify presence of Download File");
			Actions.click(IONAPI_V_13.download,"click on Download File");
		}
		public static void api_MetaData(){
			navigateToActivityPage();
			click_APIMetaData();
			click_DownloadFile();
			Actions.pause(5);
			File folder = new File(RpPath+"\\Downloads");
			File[] listOfFiles = folder.listFiles();

			    for (int i = 0; i < listOfFiles.length; i++) {
			    	System.out.println("File " + listOfFiles[i].getName());
			   
			    	 
			      
			        	 Actions.loggerDetails(listOfFiles[i].getName());
			        
			      
			      File f1=new File(RpPath+"\\Downloads\\"+listOfFiles[i].getName());
		        	f1.delete();
			    }
		}
		//CREATE OTHER APP
		public static void create_OtherApp(String name,String desc,String redirectURL,String downloadURL,String verification,String user,String userDetails,String testDesc){
			navigateToActivityPage();
			click_AuthorizedApps();
			click_AddAuthorizedApps();
			create_Other(name, desc, redirectURL, downloadURL);
			reset_Secret(verification);
			download_Credentials(verification);
			emailQRCode(user, userDetails,verification);
			edit_WindowsApp(testDesc);
			cancel_Button(name);
			Actions.switchToDefaultContent();
			navigateToMenu("Mobile Apps");
			Actions.pause(1);
			select_MobileDevice("Mobile (Other)",name);
			Actions.verifyElement(By.xpath("//h3[@title='"+name+"']"), "Verify Presence of application"+name);
		}
		//CREATE IOS APP
		public static void create_IOSApp(String name,String desc,String redirectURL,String verification,String user,String userDetails,String testDesc,String bundleID){
			navigateToActivityPage();
			click_AuthorizedApps();
			click_AddAuthorizedApps();
			createIOS(name,desc,redirectURL);
			Actions.pause(.5);
			reset_Secret(verification);
			download_Credentials(verification);
			emailQRCode(user, userDetails,verification);
			edit_IOSApp(testDesc,bundleID);
			cancel_Button(name);
			Actions.switchToDefaultContent();
			navigateToMenu("Mobile Apps");
			Actions.pause(1);
			select_MobileDevice("Mobile (iOS)",name);
			Actions.verifyElement(By.xpath("//h3[@title='"+name+"']"), "Verify Presence of application"+name);
		}
		//CREATE Windows APP
		public static void create_WindowsApp(String name,String desc,String redirectURL,String verification,String user,String userDetails,String testDesc){
			navigateToActivityPage();
			click_AuthorizedApps();
			click_AddAuthorizedApps();
			createWindows(name,desc,redirectURL);
			reset_Secret(verification);
			download_Credentials(verification);
			emailQRCode(user, userDetails,verification);
			edit_WindowsApp(testDesc);
			cancel_Button(name);
			Actions.switchToDefaultContent();
			navigateToMenu("Mobile Apps");
			Actions.pause(1);
			select_MobileDevice("Mobile (Windows)",name);
			Actions.verifyElement(By.xpath("//h3[@title='"+name+"']"), "Verify Presence of application"+name);
		}


		//CREATE Windows APP
		public static void create_WebApp(String name,String desc,String redirectURL,String javascript,String verification,String testDesc){
			navigateToActivityPage();
			click_AuthorizedApps();
			click_AddAuthorizedApps();
			System.out.println("Javascript"+javascript);
			createWeb(name,desc,redirectURL,javascript);
			reset_Secret(verification);
			download_Credentials(verification);
			edit_WindowsApp(testDesc);
			cancel_Button(name);
		}

		//CREATE BACKEND WEB SERVICE

		public static void create_BackEndService(String name,String desc,String verification,String user,String userDetails,String testDesc){
			navigateToActivityPage();
			click_AuthorizedApps();
			click_AddAuthorizedApps();
			createBackend(name,desc);
			reset_Secret(verification);
			//download_Credentials(verification);
			backeEnd_Download(user,userDetails,verification);
			edit_WindowsApp(testDesc);		
			cancel_Button(name);
		}


		//CREATE BACKENDSERVICE AND VERIFY IN IFS MODULE

		public static void create_BackEndServiceVerification(String name,String desc,String verification,String user,String userDetails,String testDesc){
			navigateToActivityPage();
			click_AuthorizedApps();
			click_AddAuthorizedApps();
			createBackend(name,desc);
			backeEnd_Download(user,userDetails,verification);
		}

		//Verify Backend application in IFS

		public static void verify_BackendAppInIFS(String user){
			RM_IFS_Trial10.navigateToMenu("User Management");
			//Actions.switchtoFrame(Global.socialCLFrame, "Switch to the Frame");
			RM_IFS_Trial10.select_ItemFromManage("Manage","Service Accounts");
			Actions.pause(1.5);
			//RM_IFS_Trial10.verify_ServiceAccounts(desc);
			RM_IFS_Trial10.select_ServiceAccounts(user);
			RM_IFS_Trial10.deleteIFS();
		}
		//ADD INFOR SUITE
		public static void add_NonInforSuite(String name,String suiteName,String apiContext,String desc,String targetUrl,String proxyUrl,String targetEndPoint,String secretKey){
			//Actions.verifyElement(AddNewAPISuite.infor_NonInforSuite, " Verify presence of 'Non Infor Suite' button");
			Actions.pause1(1);
			Actions.click_JS(AddNewAPISuite_V_13.infor_NonInforSuite, "Click on Non Infor Suite");
			Actions.pause(.9);
			Actions.type(AddNewAPISuite_V_13.noninfor_ApplicationName,name,"Enter Application Name:");
			Actions.type(AddNewAPISuite_V_13.noninfor_SuiteName,suiteName,"Enter Suite Name:");
			Actions.waitUntill_PleaseWait();
			
			Actions.pause1(.9);
			Actions.type(AddNewAPISuite_V_13.noninfor_Description,desc,"Enter Description:");

			Actions.type(AddNewAPISuite_V_13.noninfor_TargetEndPointURL,targetUrl,"Enter Target EndPoint URL:");
			
			Actions.type(AddNewAPISuite_V_13.noninfor_TargetEndPointAcessKey,targetEndPoint,"Enter Target EndPoint:");
			Actions.type(AddNewAPISuite_V_13.noninfor_TargetEndPointSecretKey,secretKey,"Enter Secret Key:");
			Actions.click(AddNewAPISuite_V_13.noninfor_ChooseIcon, "Click On Choose Icon button");
			Actions.pause1(5);
			Actions.click(Admin_ManageApp.nonProvisioned_SelectIcon, "Select Icon from the list");
			Actions.click(Admin_ManageApp.nonInfor_SubIcon, "Select  Sub Icon from the list");
			Actions.click(Admin_ManageApp.nonProvisioned_ChooseIcon_Done, "Done button");
			Actions.pause1(.9);
			Actions.scrollToElement(AddNewAPISuite_V_13.noninfor_APIContext);
			Actions.type(AddNewAPISuite_V_13.noninfor_APIContext,apiContext,"Enter API Context:");
			Actions.pause1(.9);
			Actions.scrollToElement(AddNewAPISuite_V_13.noninfor_ProxytEndPointURL);
			Actions.type(AddNewAPISuite_V_13.noninfor_ProxytEndPointURL,proxyUrl,"Enter Proxy EndPoint URL:");
			
			save_NonInforSuite();

		}

		//Add End Point Non Infor Suite
		public static void add_EndPointNonInforSuite(String targetEndPoint,String endPointAccessKey,String endPointSecretKey,String proxyendPointURL){
			Actions.click(AddNewAPISuite_V_13.noninfor_AddEndPoint, "Click on  Add EndPoint in Non Infor Suite");
			Actions.type(AddNewAPISuite_V_13.noninfor_AddEndPoint_Targeturl,targetEndPoint,"Enter Target EndPoint URL:");
			Actions.type(AddNewAPISuite_V_13.noninfor_AddEndPoint_ConsumerKey,endPointAccessKey,"Enter EndPoint Access Key: ");
			Actions.type(AddNewAPISuite_V_13.noninfor_AddEndPoint_SecretKey,endPointSecretKey,"Enter EndPoint Secret Key: ");
			Actions.type(AddNewAPISuite_V_13.noninfor_AddEndPoint_proxyEndPointURL,proxyendPointURL,"Enter EndPoint Proxy URL: ");
			save();


		}

		//ADD DOCUMENTATION FOR NON INFOR SUITE
		public static void add_Decomentation(String docName,String docLocation){
			Actions.click(AddNewAPISuite_V_13.noninfor_Documentation, "Click on Documentation in Non Infor Suite");
			Actions.click(AddNewAPISuite_V_13.noninfor_AddDocumentation, "Click on Add Documentation in Non Infor Suite");
			Actions.type(AddNewAPISuite_V_13.noninfor_DocName,docName,"Enter Documentation Name: ");
			Actions.type(AddNewAPISuite_V_13.noninfor_DocLocation,docLocation,"Enter Documentation Location: ");
			save_Docs();
		Actions.pause1(1);
		}
		
		public static void save_Docs(){
			Actions.click(IONAPIAuthorizedApps_V_13.save, "Save Documentation");
			if(Actions.verifyElementPresent(IONAPIAuthorizedApps_V_13.ok, "Verify presence of 'OK' button"))
			{
				Actions.pause(1);
				Actions.click(IONAPIAuthorizedApps_V_13.ok, "Click on OK Button");
			}
		}

		
		public static void save_Resources(){
			Actions.click(IONAPIAuthorizedApps_V_13.save, "Save Documentation");
			if(Actions.verifyElementPresent(IONAPIAuthorizedApps_V_13.ok, "Verify presence of 'OK' button"))
			{
				Actions.pause(1);
				Actions.click(IONAPIAuthorizedApps_V_13.ok, "Click on OK Button");
			}
		}
		
		public static void edit_SuiteSave(){
			Actions.click(IONAPIAuthorizedApps_V_13.save, "Save Documentation");
			if(Actions.verifyElementPresent(IONAPIAuthorizedApps_V_13.ok, "Verify presence of 'OK' button"))
			{
				Actions.pause(1);
				Actions.click(IONAPIAuthorizedApps_V_13.ok, "Click on OK Button");
			}
		}
		//ADD RESOURCE FOR NON INFOR SUITE
		public static void add_Resource(String resourcePath){
			Actions.click(AddNewAPISuite_V_13.noninfor_Resources, "Click on Resource in Non Infor Suite");
			Actions.click(AddNewAPISuite_V_13.noninfor_AddResources, "Click on Add Resources in Non Infor Suite");
			Actions.type(AddNewAPISuite_V_13.noninfor_ResourcePath,resourcePath,"Enter Resource Path: ");
			save_Resources();

			delete_EndPointResource();
		}
		//EDIT RESOURCE
		public static void edit_Resource(String editedPath){
			Actions.click(AddNewAPISuite.noninfor_EditResource, "Click on edit Resource in Non Infor Suite");
			Actions.type(AddNewAPISuite.noninfor_ResourcePath,editedPath,"Enter Resource Path: ");
			save_Resources();


		}
		//EDIT SUITE
		public static void edit_SuiteName(String editedSuitName,String editedDesc){
			Actions.click(AddNewAPISuite_V_13.noninfor_EditSuite, "Click on Edit Suit Name");
			Actions.clearText(AddNewAPISuite_V_13.noninfor_EditSuiteName, "Clear Edit Suit Name");
			Actions.type(AddNewAPISuite_V_13.noninfor_EditSuiteName,editedSuitName,"Enter Suite Name: ");
			Actions.type(AddNewAPISuite_V_13.noninfor_EditSuiteDesc,editedDesc,"Enter Description Details: ");
			edit_SuiteSave();
		}
		//DEELTE RESOURCE/ENDPOINT
		public static void delete_EndPointResource(){
			Actions.click(AddNewAPISuite_V_13.noninfor_Delete, "Click on Delete Button");
			Actions.click(Global.yes, "Click on Yes Button");
			Actions.click(IONAPIAuthorizedApps_V_13.ok, "Click on OK Button");
		}


		//CREATE NON INFOR SUITE
		public static void create_NonIforSuite(String name,String suiteName,String apiContext,String desc,String targetUrl,String proxyUrl,String targetEndPoint,String secretKey,String targetEndPointDetails,String endPointAccessKey,String endPointSecretKey,String proxyendPointURL,String docName,String location,String resourcePath,String editSuit,String editDesc){
			navigateToActivityPage();
			click_AddApi();
			Actions.pause(1);
			Actions.waitUntill_PleaseWait();
			add_NonInforSuite(name,suiteName,apiContext,desc,targetUrl,proxyUrl,targetEndPoint,secretKey);
			Actions.pause(1);
			add_EndPointNonInforSuite(targetEndPointDetails,endPointAccessKey,endPointSecretKey,proxyendPointURL);
			Actions.pause(2);
			add_Decomentation(docName,location);
			Actions.pause(1);
			add_Resource(resourcePath);
			Actions.pause(1);
			edit_SuiteName(editSuit,editDesc);
		}
		//SELECT MOBILE DEVICE
		public static void select_MobileDevice(String deviceName,String appName){
			Actions.verifyElement(MobileApps.search, "Verify presence of Search");
			
			Actions.click(IONAPIAuthorizedApps_V_13.select,"Select App Name Details:");
			Actions.click(By.xpath("//a[text()='"+deviceName+"']"), "Click on Device Name");
			Actions.type(By.id("searchfield"),appName,"Filter Details of:"+appName);
		}
		//SELECT MOBILE DEVICE
			public static void select_MobileDeviceDetails(String deviceName){
				Actions.verifyElement(MobileApps.search, "Verify presence of Search");
				
				Actions.click(IONAPIAuthorizedApps_V_13.select,"Select App Name Details:");
				//Actions.type(By.id("searchfield"),appName,"Filter Details of:"+appName);
				Actions.click(By.xpath("//a[text()='"+deviceName+"']"), "Click on Device Name");
			}
		//MOBILE ANDROID
		public static void mobile_Android(String mobileAndroid){
			select_MobileDeviceDetails(mobileAndroid);
			String android=Actions.getText(By.xpath("//h5[text()='"+mobileAndroid+"']"));
			if(android.equals(mobileAndroid)){
				Actions.verifyElement(By.xpath("//h5[text()='"+mobileAndroid+"']"), "Verify presence of mobile Android image");
				Actions.click(By.xpath("//h5[text()='"+mobileAndroid+"']/../img"), "Click on Mobile Android Image");
				Actions.verifyElement(IONAPIAuthorizedApps_V_13.backButton, "Verify presence of 'Back' button");			
				Actions.click(IONAPIAuthorizedApps_V_13.backButton, "Click on Back Button");
			}
		}
		//MOBILE IOS
		public static void mobile_IOS(String mobileIOS){
			select_MobileDeviceDetails(mobileIOS);
			String ios=Actions.getText(By.xpath("//h5[text()='"+mobileIOS+"']"));
			if(ios.equals(mobileIOS)){
				Actions.verifyElement(By.xpath("//h5[text()='"+mobileIOS+"']"), "Verify presence of mobile IOS image");
				Actions.click(By.xpath("//h5[text()='"+mobileIOS+"']/../img"), "Click on Mobile IOS Image");
				Actions.verifyElement(IONAPIAuthorizedApps_V_13.backButton, "Verify presence of 'Back' button");			
				Actions.click(IONAPIAuthorizedApps_V_13.backButton, "Click on Back Button");
			}
		}
		//MOBILE WINDOWS
		public static void mobile_Windows(String mobileWindows){
			select_MobileDeviceDetails(mobileWindows);
			String windows=Actions.getText(By.xpath("//h5[text()='"+mobileWindows+"']"));
			if(windows.equals(mobileWindows)){
				Actions.verifyElement(By.xpath("//h5[text()='"+mobileWindows+"']"), "Verify presence of mobile Windows image");
				Actions.click(By.xpath("//h5[text()='"+mobileWindows+"']/../img"), "Click on Mobile Windows Image");
				Actions.verifyElement(IONAPIAuthorizedApps_V_13.backButton, "Verify presence of 'Back' button");			
				Actions.click(IONAPIAuthorizedApps_V_13.backButton, "Click on Back Button");

			}
		}

		//VERIFY APPS
		public static void apis(){
			HashMap<String, String> testData=Utility.getConfigData();
			String env=testData.get("ENVIRONMENT").toUpperCase();
			System.out.println(env);
			switch(env)
			{

			case "CLOUD":
			{
				Actions.select(By.xpath("//select[@data-ng-model='UI.selectedSuiteType']"), "Infor Provisioned Suites", "Select Infor provisoned Suites");
				Actions.verifyElement(IONAPI.mcc_img1, "Verify presence of 'MCC' Image");	
				Actions.dblClick(IONAPI.mcc_img1, "Click on the MCC Image");
				Actions.pause(1.5);
				Actions.verifyElement(IONAPI.mcc_img1_Resource_Stage, "Verify presence of 'Resources' button");	
				Actions.click(IONAPI.mcc_img1_Resource_Stage, "Click on Resource Button");
				Actions.verifyElement(IONAPI.mcc_img1_verifyResource, "Verify presence of 'Resources' Tab");
				Actions.pause(1);
				Actions.click(IONAPI.mcc_Back, "Click on Back Button");
				Actions.verifyElement(IONAPI.mcc_img1_Documentation_stage, "Verify presence of 'Documentation' button");	
				Actions.click(IONAPI.mcc_img1_Documentation_stage, "Click on Documentation Button");
				Global.minglePageLoad_IONAPI();
				Actions.verifyElement(IONAPI.mcc_img1_verifyDocumentation, "Verify presence of 'Documentation' Tab");	
				/*Actions.verifyElement(IONAPI.mcc_img1_verifySwaggerDocumentation_Device, "Verify presence of 'Swageer Documentation Device'");	
				Actions.verifyElement(IONAPI.mcc_img1_verifySwaggerDocumentation_DeviceDetails, "Verify presence of 'Swageer Documentation Device Details' ");
				Actions.verifyElement(IONAPI.mcc_img1_verifySwaggerDocumentation_ION, "Verify presence of 'Swageer ION Device'");			
				Actions.verifyElement(IONAPI.mcc_img1_verifySwaggerDocumentation_Social, "Verify presence of 'Swageer Social Device'");	
				Actions.verifyElement(IONAPI.mcc_img1_verifySwaggerDocumentation_SocialData, "Verify presence of 'Swageer Social Device Details'");
				Actions.pause(1);*/
				Actions.click(IONAPI.mcc_Back, "Click on Back Button");
				Actions.pause(2);
				Actions.click(IONAPI.mcc_Back, "Click on Back Button");
				click_AuthorizedApps();
				Actions.click(IONAPI.availableAPIs, "Clock On Available APIS");
				Actions.pause(2);
				Actions.dblClick(IONAPI.mcc_img2, "Click on the MCC Image2");
				Actions.pause(2);
				Actions.scrollToElement(IONAPI.mcc_img1_Resource);
				Actions.verifyElement(IONAPI.mcc_img1_Resource, "Verify presence of 'Resources' button");	
				Actions.click(IONAPI.mcc_img1_Resource, "Click on Resource Button");
				Actions.pause(1);
				Actions.verifyElement(IONAPI.mcc_img1_verifyResource, "Verify presence of 'Resources'tab");	
				Actions.click(IONAPI.mcc_Back, "Click on Back Button");
				break;
			}
			case "OP":
			{
				Actions.verifyElement(IONAPI.mcc_img1, "Verify presence of 'MCC' Image");	
				Actions.dblClick(IONAPI.mcc_img1, "Click on the MCC Image");
				Actions.pause(1);
				Actions.verifyElement(IONAPI.mcc_img1_Resource, "Verify presence of 'Resources' button");	
				Actions.click(IONAPI.mcc_img1_Resource, "Click on Resource Button");
				Actions.verifyElement(IONAPI.mcc_img1_verifyResource, "Verify presence of 'Resources' tab");	
				Actions.click(IONAPI.mcc_Back, "Click on Back Button");
				Actions.pause(2);
				Actions.dblClick(IONAPI.mcc_img2, "Click on the MCC Image2");
				Actions.verifyElement(IONAPI.mcc_img1_Resource, "Verify presence of 'Resources' button");	
				Actions.click(IONAPI.mcc_img1_Resource, "Click on Resource Button");
				Actions.pause(1);
				Actions.verifyElement(IONAPI.mcc_img1_verifyResource, "Verify presence of 'Resources' tab");	
				Actions.click(IONAPI.mcc_Back, "Click on Back Button");
				Actions.verifyElement(IONAPI.mcc_img1_Documentation, "Verify presence of 'Documentation' button");	
				Actions.click(IONAPI.mcc_img1_Documentation, "Click on Documentation Button");
				Global.minglePageLoad_IONAPI();
				Actions.verifyElement(IONAPI.mcc_img1_verifyDocumentation, "Verify presence of 'Documentation' Tab");	
				Actions.verifyElement(IONAPI.mcc_img1_verifySwaggerDocumentation_Device, "Verify presence of 'Swagger Documentation Device'");	
				Actions.verifyElement(IONAPI.mcc_img1_verifySwaggerDocumentation_DeviceDetails, "Verify presence of  'Swagger Documentation Device' Details");
				Actions.verifyElement(IONAPI.mcc_img1_verifySwaggerDocumentation_ION, "Verify presence of 'Swagger ION' Device");			
				Actions.verifyElement(IONAPI.mcc_img1_verifySwaggerDocumentation_Social, "Verify presence of  'Swagger Social'");	
				Actions.verifyElement(IONAPI.mcc_img1_verifySwaggerDocumentation_SocialData, "Verify presence of 'Swagger Socail' Details");
				Actions.pause(1);
				Actions.click(IONAPI.mcc_Back, "Click on Back Button");
				Actions.click(IONAPI.mcc_Back, "Click on Back Button");
			}
			}
		}
		//VERIFY MOBILE APPS
		public static void verify_MobileApps(){
			navigateToMenu("Mobile Apps");
			Actions.impwait();
			Actions.pause(1);
			mobile_Android("Mobile (Android)");
			mobile_IOS("Mobile (iOS)");
			mobile_Windows("Mobile (Windows)");

		}
		//VERIFY AVAILABLE APIS
		public static void verify_AvailableAPIS(){
			navigateToActivityPage();
			apis();

		}
		
		public static void verifyProvisionedSuiteSwaggerDoc(){
			navigateToActivityPage();
			Actions.click(IONAPIAuthorizedApps_V_13.select, "Click on select");
			
			Actions.click(By.xpath("//a[text()='Infor Provisioned Suites']"), "Select Infor provisoned Suites");
			Actions.verifyElement(By.xpath("//h3[text()='IDM']"), "Verify presence of 'MCC' Image");	
			Actions.dblClick(By.xpath("//h3[text()='IDM']"), "Click on the MCC Image");
			Actions.pause(1.5);
			
			Actions.verifyElement(IONAPI.mcc_img1_Documentation_stage, "Verify presence of 'Documentation' button");	
			Actions.click(IONAPI.mcc_img1_Documentation_stage, "Click on Documentation Button");
			Global.minglePageLoad_IONAPI();
			Actions.verifyElement(IONAPIAuthorizedApps_V_13.documentationLabel, "Verify presence of 'Documentation' Tab");	
			Actions.pause1(5);
			Actions.verifyElement(By.id("resources_container"), "Verify presence of UI Container");
			File folder = new File(RpPath+"\\Downloads");
			File[] listOfFiles = folder.listFiles();

			    for (int i = 0; i < listOfFiles.length; i++) {
			    	System.out.println("File " + listOfFiles[i].getName());
			   
			    	 
			      
			        	 Actions.loggerDetails(listOfFiles[i].getName());
			        		
			    			
			     		
			     		File f1=new File(RpPath+"\\Downloads\\"+listOfFiles[i].getName());
			        	f1.delete();
			    }
		}
		
		public static void clone_Features(){
			navigateToActivityPage();
			click_AuthorizedApps();
			Actions.click(By.id("searchfield"), "Click On Search Field");
			Actions.type(By.id("searchfield"), "Infor","Enter Infor in Search Field");
			//a[contains(@title,'Infor Ming.le')]
			
			Actions.click(By.xpath("//span[contains(text(),'Enabled')]/../descendant::h3[contains(text(),'Infor Ming.le')]"), "Click Infor app which is in enable status");
			Actions.pause1(2);
			Actions.scrollToElement(By.xpath("//button[text()='Disable']"));
			Actions.verifyElement(By.xpath("//button[text()='Disable']"), "Verify Disable Button");
			
			Actions.click(By.xpath("//button[text()='Disable']"), "Click On Disable Button");
			//Actions.getText(By.xpath("//p[@data-infor-translate='want_to_disable_this_auth_app']"));
			Actions.pause1(1);
			Actions.click(Global.yes, "Click on Yes Button");
			//Actions.pause(.9);
			Actions.getText(By.id("message-text"));
			Actions.click(IONAPIAuthorizedApps_V_13.ok, "Click on OK Button");
			Actions.verifyElement(By.xpath("//button[text()='Clone']"), "Verify Clone Button");
			Actions.click(By.xpath("//button[text()='Clone']"), "Click On clone Button");
			Actions.verifyElement(IONAPIAuthorizedApps_V_13.save, "Verify presence of 'Save' button");
			Actions.verifyElement(By.xpath("//button[text()='Cancel']"), "Verify Cancel Button");
			//Actions.verifyElement(By.xpath("//button[text()='Delete']"), "Verify Delete Button");
			Actions.pause(2);
			Actions.scrollToElement(IONAPIAuthorizedApps_V_13.description);
			Actions.clearText(IONAPIAuthorizedApps_V_13.description, "Clear App Name");
			Actions.type(IONAPIAuthorizedApps_V_13.description,"Infor Cloned","Enter App Name Details:");
			save();
			click_AuthorizedApps();
			Actions.pause(1);
			Actions.click(By.xpath("//span[contains(text(),'Infor Cloned')]/following::button"), "Click Infor app which is in Cloned status");
			Actions.click(Global.yes, "Click on Yes Button");
			//Actions.click(IONAPIAuthorizedApps_V_13.ok, "Click on OK Button");
			Actions.click(By.xpath("//span[contains(text(),'Disabled')]/../../descendant::h3[contains(text(),'Infor Ming.le')]"), "Click Infor app which is in Cloned status");
			Actions.verifyElement(By.xpath("//button[text()='Enable']"), "Verify Enable Button");
			Actions.click(By.xpath("//button[text()='Enable']"), "Click On ENABLE Button");
			Actions.click(Global.yes, "Click on Yes Button");
			Actions.click(IONAPIAuthorizedApps_V_13.ok, "Click on OK Button");
			
		
		}
		
		public static void IONAPI_GeneralSettings()
		{
			navigateToActivityPage();
			click_GeneralSettingstab();
			Actions.verifyElementPresent(IONAPI_V_13.enableExportSwitch, "export target end point credentials switch");
		}
		
		public static void IONAPI_Export(String name,String suiteName,String apiContext,String desc,String targetUrl,String proxyUrl,String targetEndPoint,String secretKey)
		{
		navigateToActivityPage();
		click_AddApi();
		Actions.pause1(1);
		Actions.waitUntill_PleaseWait();
		add_NonInforSuite(name,suiteName,apiContext,desc,targetUrl,proxyUrl,targetEndPoint,secretKey);
		
		click_GeneralSettingstab();
		Actions.pause1(8);
		Actions.verifyElementPresent(IONAPI.enableExportSwitch, "export target end point credentials switch");
		if(!Actions.verifyElementPresent(IONAPI.exportwarning_Msg,"error message"))
		{
			System.out.println("in the IF");
			Actions.click(IONAPI.enableExportSwitch, "enable switch");
		}
		//Actions.pause1(8);
		/*if(Actions.isChecked(IONAPI.enableExportSwitch))
		{*/
			//Actions.click(By.xpath("//h3[@data-infor-translate='export']"), "export test");
			Actions.getText(IONAPI.exportwarning_Msg);
			selectandExport(suiteName);
			Actions.verifyElementPresent(IONAPI.credentials, "credentials tab");
			Actions.click(IONAPI.cancel_exportBtn, "cancel");
		//}
		/*else if(!Actions.isChecked(IONAPI.enableExportSwitch))
		{
		Actions.click(By.xpath("//h3[@data-infor-translate='export']"), "export test");
		Actions.click(IONAPI.enableExportSwitch, "enable switch");
		Actions.click(IONAPI.exportwarning_Msg, "click");
	    Actions.getText(IONAPI.exportwarning_Msg);
	    selectandExport(suiteName);
	    Actions.verifyElementPresent(IONAPI.credentials, "credentials tab");
		Actions.click(IONAPI.cancel_exportBtn, "cancel");
		}*/
		checkExport(suiteName);
		Actions.click(By.xpath("//h3[text()='"+suiteName+"']/../img"), "Select Related Suite");
		Actions.pause(1);
		Actions.click(IONAPIAuthorizedApps.authorized_DeleteSuite, "Click onDelete API Suite");
		Actions.click(Global.yes, "Click on Yes Button");
		Actions.click(IONAPIAuthorizedApps.authorized_mobileOK, "Click on OK Button");
		}
		
		public static void checkExport(String suiteName)
		{   
			//Actions.pause1(8);
			click_GeneralSettingstab();
			Actions.click(By.xpath("//h3[@data-infor-translate='export']"), "export test");
			Actions.pause1(5);
			Actions.click(IONAPI.enableExportSwitch, "disable switch");
			Actions.click(By.xpath("//h3[@data-infor-translate='export']"), "export test");
			selectandExport(suiteName);
			Actions.verifyElementNotPresent(IONAPI.credentials, "credentials tab");
			Actions.click(IONAPI.cancel_exportBtn, "cancel");	
		}
		
		public static void selectandExport(String suiteName)
		{
		Actions.click(IONAPI.availableAPIs, "click on available APIS");
		Actions.click(IONAPI.availableAPIs, "click on available APIS");
		Actions.select(By.xpath("//select[@data-ng-model='UI.selectedSuiteType']"), "Non-Infor Suites", "Select Non-Infor Suites");
		Actions.click_JS(By.xpath("//h3[text()='"+suiteName+"']/../img"), "Select Related Suite");
		Actions.click(IONAPIAuthorizedApps.exportIcon, "Export button");
		}
		
		
		
		public static void IONAPI_IMPORT(String name,String suiteName,String apiContext,String desc,String targetUrl,String proxyUrl,String targetEndPoint,String secretKey,String search,String app) 
		{
		navigateToActivityPage();
		click_AddApi();
		Actions.pause1(1);
		Actions.waitUntill_PleaseWait();
		add_NonInforSuite(name,suiteName,apiContext,desc,targetUrl,proxyUrl,targetEndPoint,secretKey);
		
		click_GeneralSettingstab();
		Actions.pause1(8);
		Actions.verifyElementPresent(IONAPI.enableExportSwitch, "export target end point credentials switch");
		if(!Actions.verifyElementPresent(IONAPI.exportwarning_Msg, "error message"))
		{
			System.out.println("in the IF");
			Actions.click(IONAPI.enableExportSwitch, "enable switch");
		}
		//Actions.pause1(8);
		/*if(Actions.isChecked(IONAPI.enableExportSwitch))
		{*/
			//Actions.click(By.xpath("//h3[@data-infor-translate='export']"), "export test");
			Actions.getText(IONAPI.exportwarning_Msg);
		
		System.out.println("in the import export method");
		//Actions.switchToDefaultContent();
		//navigateToActivityPage();
		Actions.click(IONAPI.availableAPIs, "click on available APIS");
		Actions.click(IONAPI.availableAPIs, "click on available APIS");
		Actions.select(By.xpath("//select[@data-ng-model='UI.selectedSuiteType']"),search,"Select:"+search);
		Actions.pause1(2);
		Actions.moveTo(IONAPIAuthorizedApps.exportIcon, "Export button");
		Actions.click_JS(IONAPIAuthorizedApps.exportIcon, "Export button");
		Actions.pause1(2);
		//Actions.verifyElement(By.xpath("//span[text()='"+app+"']/../ancestor::Tr/descendant::input"), "Verify presence of select app");
		Actions.click_JS(By.xpath("//span[text()='"+app+"']/../ancestor::Tr/descendant::input"), "Select Application");
		Actions.click_JS(By.xpath("//span[text()='"+app+"']/../ancestor::Tr/descendant::input[contains(@data-ng-model,'IncludeCredentials')]"),"uncheck include credentials");
		Actions.click(IONAPIAuthorizedApps.exportSuite, "Click On Export Suite");
		Actions.pause1(9);
		File folder = new File(RpPath+"\\Downloads");
		File[] listOfFiles = folder.listFiles();

		    for (int i = 0; i < listOfFiles.length; i++) {
		    	System.out.println("File " + listOfFiles[1].getName());
		   
		    	 Actions.loggerDetails(listOfFiles[1].getName());
		      
		        	// Actions.loggerDetails(listOfFiles[1].getName());
		        		Actions.refresh();
		    			RM_IONAPI.navigateToActivityPage();
		    			RM_IONAPI.click_AuthorizedApps();
		    			RM_IONAPI.click_AvailableAPIS();
		     		
		     		delete_SuiteDetails("Non-Infor Suites",app);
		     		Actions.pause1(1);
		     		Actions.click(IONAPIAuthorizedApps.importIcon, "Import ICON");
		     		Actions.pause1(5);
		     		try {
						Runtime.getRuntime().exec(RpPath+"\\chrome.exe"+" "+RpPath+"\\Downloads\\"+listOfFiles[1].getName());
					} catch (Exception e) {
						// TODO Auto-generated catch block
						
						e.printStackTrace();
						
					}  
		     		Actions.pause1(5);
		     		Actions.click(IONAPIAuthorizedApps.importButton, "Import Button");
		     		Actions.verifyElement(IONAPIAuthorizedApps.editDetails, "edit details");
		     		Actions.click(IONAPIAuthorizedApps.editDetails, "edit details");
		     		//Actions.click(By.xpath("//label[@data-infor-translate='use_mutual_ssl']"),"ssl check");
		     		Actions.type(IONAPIAuthorizedApps.targetEndPointDesc, "test", "description");
		     		Actions.type(IONAPIAuthorizedApps.accesskey, "password", "enter password");
		     		Actions.type(IONAPIAuthorizedApps.secretekey, "password1", "enter password");
		     		/*Actions.click(IONAPIAuthorizedApps.loadCertificate, "load certificate");
		     		Actions.pause1(2);
		     		Runtime.getRuntime().exec(RpPath+"\\chrome.exe"+" "+RpPath+"\\img\\ION.der");
		     		Actions.pause1(2);*/
		     		Actions.click(IONAPIAuthorizedApps.save_EndPoint, "save");
		     		Actions.click_JS(IONAPIAuthorizedApps.importButton, "Import Button");
		     		Actions.click(IONAPIAuthorizedApps.backButton, "Cick on Back Button");
		     		try{
		     		File f1=new File(RpPath+"\\Downloads\\"+listOfFiles[i].getName());
		        	f1.delete();
		     		}
		     		catch (Exception e) {
		     			e.printStackTrace();
						// TODO: handle exception
					}
		    }}
}
